Search.setIndex({"alltitles": {"(Maximum inner-product search)": [[126, "maximum-inner-product-search"]], "0. Installation": [[123, "installation"], [124, "installation"], [136, "installation"], [137, "installation"], [138, "installation"]], "0. Preparation": [[127, "preparation"], [133, "preparation"], [142, "preparation"], [143, "preparation"], [144, "preparation"]], "0. Setup": [[140, "setup"]], "1. BAAI General Embedding": [[122, "baai-general-embedding"]], "1. BGE-M3 structure": [[124, "bge-m3-structure"]], "1. Background": [[121, "background"]], "1. Data": [[142, "data"], [143, "data"], [144, "data"]], "1. Dataset": [[140, "dataset"]], "1. Datasets": [[138, "datasets"]], "1. Embedding": [[120, null]], "1. Encode sentences": [[123, "encode-sentences"]], "1. Flat Index": [[133, "flat-index"]], "1. IndexFlat*": [[131, "indexflat"]], "1. Installation": [[130, "installation"]], "1. Intro": [[136, "intro"]], "1. Jaccard Similarity": [[126, "jaccard-similarity"]], "1. Recall": [[127, "recall"]], "1. Run the Evaluation": [[137, "run-the-evaluation"]], "1. Scalar Quantizer": [[132, "scalar-quantizer"]], "2. BGE Series Models": [[122, "bge-series-models"]], "2. Comparison": [[123, "comparison"]], "2. Data Preparation": [[130, "data-preparation"]], "2. Embedding": [[140, "embedding"]], "2. Euclidean Distance": [[126, "euclidean-distance"]], "2. IVF Index": [[133, "ivf-index"]], "2. IndexIVF*": [[131, "indexivf"]], "2. Indexing": [[142, "indexing"], [143, "indexing"], [144, "indexing"]], "2. MRR": [[127, "mrr"]], "2. Metrics": [[125, null]], "2. Model": [[138, "model"]], "2. Multi-Functionality": [[124, "multi-functionality"]], "2. Product Quantizer": [[132, "product-quantizer"]], "2. Submit to MTEB Leaderboard": [[137, "submit-to-mteb-leaderboard"]], "2.1 BGE": [[122, "bge"]], "2.1 Dense Retrieval": [[124, "dense-retrieval"]], "2.2 BGE v1.5": [[122, "bge-v1-5"]], "2.2 Sparse Retrieval": [[124, "sparse-retrieval"]], "2.3 LLM-Embedder": [[122, "llm-embedder"]], "2.3 Multi-Vector": [[124, "multi-vector"]], "2.4 BGE M3": [[122, "bge-m3"]], "2.4 Hybrid Ranking": [[124, "hybrid-ranking"]], "3. Cosine Similarity": [[126, "cosine-similarity"]], "3. Create Index on CPU": [[130, "create-index-on-cpu"]], "3. Evaluate": [[138, "evaluate"]], "3. HNSW Index": [[133, "hnsw-index"]], "3. IndexHNSW*": [[131, "indexhnsw"]], "3. Indexing": [[128, null], [140, "indexing"]], "3. Partially Evaluate": [[137, "partially-evaluate"]], "3. Retreive and Generate": [[143, "retreive-and-generate"]], "3. Retrieve and Generate": [[142, "retrieve-and-generate"], [144, "retrieve-and-generate"]], "3. nDCG": [[127, "ndcg"]], "3.1 Naive Approach": [[126, "naive-approach"]], "3.2 PyTorch Implementation": [[126, "pytorch-implementation"]], "3.3 PyTorch Function Call": [[126, "pytorch-function-call"]], "4. Build GPU Index and Search": [[130, "build-gpu-index-and-search"]], "4. Evaluation": [[134, null]], "4. Future Work": [[137, "future-work"]], "4. IndexLSH": [[131, "indexlsh"]], "4. Inner Product/Dot Product": [[126, "inner-product-dot-product"]], "4. LSH": [[133, "lsh"]], "4. Precision": [[127, "precision"]], "4. Retrieval": [[140, "retrieval"]], "4. Submit to MTEB Leaderboard": [[138, "submit-to-mteb-leaderboard"]], "5. Examples": [[126, "examples"]], "5. MAP": [[127, "map"]], "5. Reranking": [[139, null], [140, "reranking"]], "5. Results": [[130, "results"]], "5. Scalar Quantizer Index": [[133, "scalar-quantizer-index"]], "5.1 Recall": [[135, "recall"]], "5.2 MRR": [[135, "mrr"]], "5.3 nDCG": [[135, "ndcg"]], "6. Evaluate": [[140, "evaluate"]], "6. Product Quantizer Index": [[133, "product-quantizer-index"]], "6. RAG": [[141, null]], "6.1 Recall": [[140, "recall"]], "6.2 MRR": [[140, "mrr"]], "6.3 nDCG": [[140, "ndcg"]], "AIR-Bench": [[24, null]], "API": [[90, null]], "AbsArguments": [[9, null], [15, null]], "AbsDataset": [[10, null], [16, null]], "AbsEmbedder": [[21, null]], "AbsEmbedderCollator": [[10, "absembeddercollator"]], "AbsEmbedderModel": [[11, "absembeddermodel"]], "AbsEmbedderSameDatasetCollator": [[10, "absembeddersamedatasetcollator"], [59, "absembeddersamedatasetcollator"]], "AbsEmbedderSameDatasetTrainDataset": [[10, "absembeddersamedatasettraindataset"]], "AbsEmbedderTrainDataset": [[10, "absembeddertraindataset"]], "AbsEmbedderTrainer": [[12, "absembeddertrainer"], [13, "absembeddertrainer"]], "AbsLLMRerankerCollator": [[16, "absllmrerankercollator"]], "AbsLLMRerankerTrainDataset": [[16, "absllmrerankertraindataset"]], "AbsModeling": [[11, null], [17, null]], "AbsReranker": [[22, null]], "AbsRerankerCollator": [[16, "absrerankercollator"]], "AbsRerankerModel": [[17, "absrerankermodel"]], "AbsRerankerTrainDataset": [[16, "absrerankertraindataset"]], "AbsRerankerTrainer": [[18, "absrerankertrainer"], [19, "absrerankertrainer"]], "AbsRunner": [[12, null], [18, null]], "AbsTrainer": [[13, null], [19, null]], "Abstract Class": [[0, null]], "All Available GPUs": [[130, "all-available-gpus"]], "Arguments": [[2, null], [53, null], [58, null], [69, null], [76, null], [81, null]], "BEIR": [[27, null]], "BGE": [[116, "bge"], [117, null], [119, null], [121, "bge"]], "BGE Explanation": [[123, null]], "BGE Series": [[122, null]], "BGE v1 & v1.5": [[116, null]], "BGE-EN-ICL": [[112, null]], "BGE-M3": [[113, null], [124, null]], "BGE-Reranker": [[114, null]], "BGE-Reranker-v2": [[115, null]], "BGE-v1.5": [[116, "bge-v1-5"]], "Base": [[52, null], [64, null], [75, null], [86, null]], "BaseEmbedder": [[94, null], [97, null]], "BaseLLMReranker": [[99, null]], "BaseReranker": [[102, null]], "C-MTEB": [[138, null]], "Choosing Index": [[133, null]], "Commercial Models": [[121, "commercial-models"]], "Community": [[118, null]], "Concept": [[106, null]], "Dataset": [[59, null], [133, "dataset"]], "Decoder Only": [[51, null], [74, null]], "DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, "decoderonlyembeddericlsamedatasettraindataset"]], "Dense Retrieval": [[113, "dense-retrieval"]], "Embedder": [[8, null], [50, null], [96, null], [108, "embedder"], [117, null]], "EmbedderOutput": [[11, "embedderoutput"]], "EmbedderTrainerCallbackForDataRefresh": [[10, "embeddertrainercallbackfordatarefresh"]], "Encoder Only": [[63, null], [85, null]], "EncoderOnlyEmbedderM3Model": [[70, "encoderonlyembedderm3model"]], "EncoderOnlyEmbedderM3ModelForInference": [[70, "encoderonlyembedderm3modelforinference"]], "EvalDenseRetriever": [[6, "evaldenseretriever"]], "EvalReranker": [[6, "evalreranker"]], "EvalRetriever": [[6, "evalretriever"]], "Evaluation": [[1, null], [23, null], [135, null]], "Evaluation Metrics": [[127, null]], "Evaluator": [[4, null]], "Example": [[131, "example"], [131, "id3"], [131, "id7"]], "FAQ": [[105, null]], "Faiss GPU": [[130, null]], "Faiss Indexes": [[131, null]], "Faiss Quantizers": [[132, null]], "Finetune": [[7, null], [49, null]], "FlagAutoModel": [[92, null]], "FlagAutoReranker": [[93, null]], "Get Embedding": [[121, "get-embedding"]], "Helper function": [[133, "helper-function"]], "Hybrid Ranking": [[113, "hybrid-ranking"]], "ICL": [[57, null]], "ICLLLMEmbedder": [[95, null]], "Indexing Using Faiss": [[129, null]], "Inference": [[20, null], [91, null]], "Install from sources:": [[107, "install-from-sources"]], "Installation": [[107, null]], "Intro": [[131, "intro"], [131, "id1"], [131, "id4"]], "Intro to Embedding": [[121, null]], "Introduction": [[106, null]], "LayerWiseLLMReranker": [[100, null]], "Layerwise": [[80, null]], "LightweightLLMReranker": [[101, null]], "M3": [[68, null]], "M3Embedder": [[98, null]], "MIRACL": [[32, null]], "MKQA": [[35, null]], "MLDR": [[39, null]], "MSMARCO": [[42, null]], "MTEB": [[45, null], [136, null]], "MTEB Leaderboard": [[137, null]], "Methods": [[3, "methods"], [10, "methods"], [10, "id1"], [10, "id2"], [11, "methods"], [12, "methods"], [13, "methods"], [16, "methods"], [17, "methods"], [18, "methods"], [19, "methods"], [21, "methods"], [22, "methods"], [33, "methods"], [36, "methods"], [40, "methods"], [43, "methods"], [54, "methods"], [59, "methods"], [60, "methods"], [65, "methods"], [70, "methods"], [77, "methods"], [82, "methods"], [87, "methods"], [92, "methods"], [93, "methods"], [94, "methods"], [95, "methods"], [97, "methods"], [98, "methods"], [99, "methods"], [100, "methods"], [101, "methods"], [102, "methods"]], "Model": [[108, null]], "Modeling": [[54, null], [60, null], [65, null], [70, null], [77, null], [82, null], [87, null]], "Multi-Functionality": [[113, "multi-functionality"]], "Multi-Granularity": [[113, "multi-granularity"]], "Multi-Linguality": [[113, "multi-linguality"]], "Multi-Vector": [[113, "multi-vector"]], "Multiple GPUs": [[130, "multiple-gpus"]], "Open-source Models": [[121, "open-source-models"]], "OpenAI": [[121, "openai"]], "Option 1:": [[130, "option-1"]], "Option 2:": [[130, "option-2"]], "Overview": [[109, null]], "Packages": [[133, "packages"]], "Preparation": [[131, "preparation"], [132, "preparation"]], "Product Quantizer": [[132, "id2"]], "Product Quantizer IVF Index": [[132, "product-quantizer-ivf-index"]], "Product Quantizer Index": [[132, "product-quantizer-index"]], "PyTorch-CUDA": [[107, "pytorch-cuda"]], "Quick Start": [[110, null]], "RAG with LangChain": [[143, null]], "RAG with LlamaIndex": [[144, null]], "Relationship with Cosine similarity": [[126, "relationship-with-cosine-similarity"]], "Reranker": [[14, null], [73, null], [103, null], [108, "reranker"], [117, null], [140, null]], "RerankerOutput": [[17, "rerankeroutput"]], "Retrieval Demo": [[111, null]], "Runner": [[55, null], [61, null], [66, null], [71, null], [78, null], [83, null], [88, null]], "Scalar Quantizer": [[132, "id1"]], "Scalar Quantizer Index": [[132, "scalar-quantizer-index"]], "Sentence Transformers": [[121, "sentence-transformers"]], "Shortage": [[131, "shortage"], [131, "id6"]], "Similarity": [[126, null]], "Simple RAG From Scratch": [[142, null]], "Single GPU:": [[130, "single-gpu"]], "Sparse Retrieval": [[113, "sparse-retrieval"]], "Start": [[106, null]], "Step 0: Preparation": [[111, "step-0-preparation"]], "Step 0: Setup": [[129, "step-0-setup"], [135, "step-0-setup"]], "Step 1: Dataset": [[129, "step-1-dataset"]], "Step 1: Load Dataset": [[135, "step-1-load-dataset"]], "Step 1: Text -> Embedding": [[111, "step-1-text-embedding"]], "Step 2: Calculate Similarity": [[111, "step-2-calculate-similarity"]], "Step 2: Embedding": [[135, "step-2-embedding"]], "Step 2: Text Embedding": [[129, "step-2-text-embedding"]], "Step 3.5 (Optional): Saving Faiss index": [[129, "step-3-5-optional-saving-faiss-index"]], "Step 3: Indexing": [[129, "step-3-indexing"], [135, "step-3-indexing"]], "Step 3: Ranking": [[111, "step-3-ranking"]], "Step 4: Evaluate": [[111, "step-4-evaluate"]], "Step 4: Find answers to the query": [[129, "step-4-find-answers-to-the-query"]], "Step 4: Retrieval": [[135, "step-4-retrieval"]], "Step 5: Evaluate": [[135, "step-5-evaluate"]], "Tradeoff": [[131, "tradeoff"], [131, "id2"], [131, "id5"]], "Trainer": [[56, null], [62, null], [67, null], [72, null], [79, null], [84, null], [89, null]], "Tutorials": [[145, null]], "Usage": [[112, "usage"], [113, "usage"], [114, "usage"], [115, "usage"], [116, "usage"]], "Using pip:": [[107, "using-pip"]], "Voyage AI": [[121, "voyage-ai"]], "arguments": [[25, null], [28, null], [46, null]], "data loader": [[29, null]], "data_loader": [[33, null], [36, null], [40, null], [43, null]], "dataset loader": [[3, null]], "evaluator": [[30, null], [37, null]], "faiss-cpu": [[129, "faiss-cpu"]], "faiss-gpu on Linux (x86_64)": [[129, "faiss-gpu-on-linux-x86-64"]], "runner": [[5, null], [26, null], [31, null], [34, null], [38, null], [41, null], [44, null], [47, null]], "searcher": [[6, null], [48, null]]}, "docnames": ["API/abc", "API/abc/evaluation", "API/abc/evaluation/arguments", "API/abc/evaluation/data_loader", "API/abc/evaluation/evaluator", "API/abc/evaluation/runner", "API/abc/evaluation/searcher", "API/abc/finetune", "API/abc/finetune/embedder", "API/abc/finetune/embedder/AbsArguments", "API/abc/finetune/embedder/AbsDataset", "API/abc/finetune/embedder/AbsModeling", "API/abc/finetune/embedder/AbsRunner", "API/abc/finetune/embedder/AbsTrainer", "API/abc/finetune/reranker", "API/abc/finetune/reranker/AbsArguments", "API/abc/finetune/reranker/AbsDataset", "API/abc/finetune/reranker/AbsModeling", "API/abc/finetune/reranker/AbsRunner", "API/abc/finetune/reranker/AbsTrainer", "API/abc/inference", "API/abc/inference/AbsEmbedder", "API/abc/inference/AbsReranker", "API/evaluation", "API/evaluation/airbench", "API/evaluation/airbench/arguments", "API/evaluation/airbench/runner", "API/evaluation/beir", "API/evaluation/beir/arguments", "API/evaluation/beir/data_loader", "API/evaluation/beir/evaluator", "API/evaluation/beir/runner", "API/evaluation/miracl", "API/evaluation/miracl/data_loader", "API/evaluation/miracl/runner", "API/evaluation/mkqa", "API/evaluation/mkqa/data_loader", "API/evaluation/mkqa/evaluator", "API/evaluation/mkqa/runner", "API/evaluation/mldr", "API/evaluation/mldr/data_loader", "API/evaluation/mldr/runner", "API/evaluation/msmarco", "API/evaluation/msmarco/data_loader", "API/evaluation/msmarco/runner", "API/evaluation/mteb", "API/evaluation/mteb/arguments", "API/evaluation/mteb/runner", "API/evaluation/mteb/searcher", "API/finetune", "API/finetune/embedder", "API/finetune/embedder/decoder_only", "API/finetune/embedder/decoder_only/base", "API/finetune/embedder/decoder_only/base/arguments", "API/finetune/embedder/decoder_only/base/modeling", "API/finetune/embedder/decoder_only/base/runner", "API/finetune/embedder/decoder_only/base/trainer", "API/finetune/embedder/decoder_only/icl", "API/finetune/embedder/decoder_only/icl/arguments", "API/finetune/embedder/decoder_only/icl/dataset", "API/finetune/embedder/decoder_only/icl/modeling", "API/finetune/embedder/decoder_only/icl/runner", "API/finetune/embedder/decoder_only/icl/trainer", "API/finetune/embedder/encoder_only", "API/finetune/embedder/encoder_only/base", "API/finetune/embedder/encoder_only/base/modeling", "API/finetune/embedder/encoder_only/base/runner", "API/finetune/embedder/encoder_only/base/trainer", "API/finetune/embedder/encoder_only/m3", "API/finetune/embedder/encoder_only/m3/arguments", "API/finetune/embedder/encoder_only/m3/modeling", "API/finetune/embedder/encoder_only/m3/runner", "API/finetune/embedder/encoder_only/m3/trainer", "API/finetune/reranker", "API/finetune/reranker/decoder_only", "API/finetune/reranker/decoder_only/base", "API/finetune/reranker/decoder_only/base/arguments", "API/finetune/reranker/decoder_only/base/modeling", "API/finetune/reranker/decoder_only/base/runner", "API/finetune/reranker/decoder_only/base/trainer", "API/finetune/reranker/decoder_only/layerwise", "API/finetune/reranker/decoder_only/layerwise/arguments", "API/finetune/reranker/decoder_only/layerwise/modeling", "API/finetune/reranker/decoder_only/layerwise/runner", "API/finetune/reranker/decoder_only/layerwise/trainer", "API/finetune/reranker/encoder_only", "API/finetune/reranker/encoder_only/base", "API/finetune/reranker/encoder_only/base/modeling", "API/finetune/reranker/encoder_only/base/runner", "API/finetune/reranker/encoder_only/base/trainer", "API/index", "API/inference", "API/inference/FlagAutoModel", "API/inference/FlagAutoReranker", "API/inference/embedder/decoder_only/BaseLLMEmbedder", "API/inference/embedder/decoder_only/ICLLLMEmbedder", "API/inference/embedder/embedder", "API/inference/embedder/encoder_only/BaseEmbedder", "API/inference/embedder/encoder_only/M3Embedder", "API/inference/reranker/decoder_only/BaseLLMReranker", "API/inference/reranker/decoder_only/LayerWiseLLMReranker", "API/inference/reranker/decoder_only/LightweightLLMReranker", "API/inference/reranker/encoder_only/BaseReranker", "API/inference/reranker/reranker", "C-MTEB", "FAQ/index", "Introduction/index", "Introduction/installation", "Introduction/model", "Introduction/overview", "Introduction/quick_start", "Introduction/retrieval_demo", "bge/bge_icl", "bge/bge_m3", "bge/bge_reranker", "bge/bge_reranker_v2", "bge/bge_v1_v1.5", "bge/index", "community/index", "index", "tutorial/1_Embedding", "tutorial/1_Embedding/1.1.1", "tutorial/1_Embedding/1.2.1", "tutorial/1_Embedding/1.2.2", "tutorial/1_Embedding/1.2.3", "tutorial/2_Metrics", "tutorial/2_Metrics/2.1", "tutorial/2_Metrics/2.2", "tutorial/3_Indexing", "tutorial/3_Indexing/3.1.1", "tutorial/3_Indexing/3.1.2", "tutorial/3_Indexing/3.1.3", "tutorial/3_Indexing/3.1.4", "tutorial/3_Indexing/3.1.5", "tutorial/4_Evaluation", "tutorial/4_Evaluation/4.1.1", "tutorial/4_Evaluation/4.2.1", "tutorial/4_Evaluation/4.2.2", "tutorial/4_Evaluation/4.3.1", "tutorial/5_Reranking", "tutorial/5_Reranking/5.1", "tutorial/6_RAG", "tutorial/6_RAG/6.1", "tutorial/6_RAG/6.2", "tutorial/6_RAG/6.3", "tutorial/index"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["API/abc.rst", "API/abc/evaluation.rst", "API/abc/evaluation/arguments.rst", "API/abc/evaluation/data_loader.rst", "API/abc/evaluation/evaluator.rst", "API/abc/evaluation/runner.rst", "API/abc/evaluation/searcher.rst", "API/abc/finetune.rst", "API/abc/finetune/embedder.rst", "API/abc/finetune/embedder/AbsArguments.rst", "API/abc/finetune/embedder/AbsDataset.rst", "API/abc/finetune/embedder/AbsModeling.rst", "API/abc/finetune/embedder/AbsRunner.rst", "API/abc/finetune/embedder/AbsTrainer.rst", "API/abc/finetune/reranker.rst", "API/abc/finetune/reranker/AbsArguments.rst", "API/abc/finetune/reranker/AbsDataset.rst", "API/abc/finetune/reranker/AbsModeling.rst", "API/abc/finetune/reranker/AbsRunner.rst", "API/abc/finetune/reranker/AbsTrainer.rst", "API/abc/inference.rst", "API/abc/inference/AbsEmbedder.rst", "API/abc/inference/AbsReranker.rst", "API/evaluation.rst", "API/evaluation/airbench.rst", "API/evaluation/airbench/arguments.rst", "API/evaluation/airbench/runner.rst", "API/evaluation/beir.rst", "API/evaluation/beir/arguments.rst", "API/evaluation/beir/data_loader.rst", "API/evaluation/beir/evaluator.rst", "API/evaluation/beir/runner.rst", "API/evaluation/miracl.rst", "API/evaluation/miracl/data_loader.rst", "API/evaluation/miracl/runner.rst", "API/evaluation/mkqa.rst", "API/evaluation/mkqa/data_loader.rst", "API/evaluation/mkqa/evaluator.rst", "API/evaluation/mkqa/runner.rst", "API/evaluation/mldr.rst", "API/evaluation/mldr/data_loader.rst", "API/evaluation/mldr/runner.rst", "API/evaluation/msmarco.rst", "API/evaluation/msmarco/data_loader.rst", "API/evaluation/msmarco/runner.rst", "API/evaluation/mteb.rst", "API/evaluation/mteb/arguments.rst", "API/evaluation/mteb/runner.rst", "API/evaluation/mteb/searcher.rst", "API/finetune.rst", "API/finetune/embedder.rst", "API/finetune/embedder/decoder_only.rst", "API/finetune/embedder/decoder_only/base.rst", "API/finetune/embedder/decoder_only/base/arguments.rst", "API/finetune/embedder/decoder_only/base/modeling.rst", "API/finetune/embedder/decoder_only/base/runner.rst", "API/finetune/embedder/decoder_only/base/trainer.rst", "API/finetune/embedder/decoder_only/icl.rst", "API/finetune/embedder/decoder_only/icl/arguments.rst", "API/finetune/embedder/decoder_only/icl/dataset.rst", "API/finetune/embedder/decoder_only/icl/modeling.rst", "API/finetune/embedder/decoder_only/icl/runner.rst", "API/finetune/embedder/decoder_only/icl/trainer.rst", "API/finetune/embedder/encoder_only.rst", "API/finetune/embedder/encoder_only/base.rst", "API/finetune/embedder/encoder_only/base/modeling.rst", "API/finetune/embedder/encoder_only/base/runner.rst", "API/finetune/embedder/encoder_only/base/trainer.rst", "API/finetune/embedder/encoder_only/m3.rst", "API/finetune/embedder/encoder_only/m3/arguments.rst", "API/finetune/embedder/encoder_only/m3/modeling.rst", "API/finetune/embedder/encoder_only/m3/runner.rst", "API/finetune/embedder/encoder_only/m3/trainer.rst", "API/finetune/reranker.rst", "API/finetune/reranker/decoder_only.rst", "API/finetune/reranker/decoder_only/base.rst", "API/finetune/reranker/decoder_only/base/arguments.rst", "API/finetune/reranker/decoder_only/base/modeling.rst", "API/finetune/reranker/decoder_only/base/runner.rst", "API/finetune/reranker/decoder_only/base/trainer.rst", "API/finetune/reranker/decoder_only/layerwise.rst", "API/finetune/reranker/decoder_only/layerwise/arguments.rst", "API/finetune/reranker/decoder_only/layerwise/modeling.rst", "API/finetune/reranker/decoder_only/layerwise/runner.rst", "API/finetune/reranker/decoder_only/layerwise/trainer.rst", "API/finetune/reranker/encoder_only.rst", "API/finetune/reranker/encoder_only/base.rst", "API/finetune/reranker/encoder_only/base/modeling.rst", "API/finetune/reranker/encoder_only/base/runner.rst", "API/finetune/reranker/encoder_only/base/trainer.rst", "API/index.rst", "API/inference.rst", "API/inference/FlagAutoModel.rst", "API/inference/FlagAutoReranker.rst", "API/inference/embedder/decoder_only/BaseLLMEmbedder.rst", "API/inference/embedder/decoder_only/ICLLLMEmbedder.rst", "API/inference/embedder/embedder.rst", "API/inference/embedder/encoder_only/BaseEmbedder.rst", "API/inference/embedder/encoder_only/M3Embedder.rst", "API/inference/reranker/decoder_only/BaseLLMReranker.rst", "API/inference/reranker/decoder_only/LayerWiseLLMReranker.rst", "API/inference/reranker/decoder_only/LightweightLLMReranker.rst", "API/inference/reranker/encoder_only/BaseReranker.rst", "API/inference/reranker/reranker.rst", "C-MTEB.rst", "FAQ/index.rst", "Introduction/index.rst", "Introduction/installation.rst", "Introduction/model.rst", "Introduction/overview.rst", "Introduction/quick_start.rst", "Introduction/retrieval_demo.ipynb", "bge/bge_icl.rst", "bge/bge_m3.rst", "bge/bge_reranker.rst", "bge/bge_reranker_v2.rst", "bge/bge_v1_v1.5.rst", "bge/index.rst", "community/index.rst", "index.rst", "tutorial/1_Embedding.rst", "tutorial/1_Embedding/1.1.1.ipynb", "tutorial/1_Embedding/1.2.1.ipynb", "tutorial/1_Embedding/1.2.2.ipynb", "tutorial/1_Embedding/1.2.3.ipynb", "tutorial/2_Metrics.rst", "tutorial/2_Metrics/2.1.ipynb", "tutorial/2_Metrics/2.2.ipynb", "tutorial/3_Indexing.rst", "tutorial/3_Indexing/3.1.1.ipynb", "tutorial/3_Indexing/3.1.2.ipynb", "tutorial/3_Indexing/3.1.3.ipynb", "tutorial/3_Indexing/3.1.4.ipynb", "tutorial/3_Indexing/3.1.5.ipynb", "tutorial/4_Evaluation.rst", "tutorial/4_Evaluation/4.1.1.ipynb", "tutorial/4_Evaluation/4.2.1.ipynb", "tutorial/4_Evaluation/4.2.2.ipynb", "tutorial/4_Evaluation/4.3.1.ipynb", "tutorial/5_Reranking.rst", "tutorial/5_Reranking/5.1.ipynb", "tutorial/6_RAG.rst", "tutorial/6_RAG/6.1.ipynb", "tutorial/6_RAG/6.2.ipynb", "tutorial/6_RAG/6.3.ipynb", "tutorial/index.rst"], "indexentries": {"_colbert_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._colbert_embedding", false]], "_compute_cross_device_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_cross_device_neg_loss", false]], "_compute_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_in_batch_neg_loss", false]], "_compute_no_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_no_in_batch_neg_loss", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._compute_similarity", false]], "_concatenate_results_from_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._concatenate_results_from_multi_process", false]], "_create_batch_data() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._create_batch_data", false]], "_create_batch_data() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlsamedatasettraindataset method)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset._create_batch_data", false]], "_dense_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._dense_embedding", false]], "_dist_gather_tensor() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._dist_gather_tensor", false]], "_encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._encode", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._encode_multi_process_worker", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker._encode_multi_process_worker", false]], "_get_file_batch_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset static method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_file_batch_size", false]], "_get_queries_attention_mask() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._get_queries_attention_mask", false]], "_get_train_group_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_train_group_size", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._load_dataset", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._sentence_embedding", false]], "_shuffle_text() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._shuffle_text", false]], "_shuffle_text() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._shuffle_text", false]], "_sparse_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._sparse_embedding", false]], "absembedder (class in flagembedding.abc.inference)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder", false]], "absembeddercollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderCollator", false]], "absembedderdataarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderDataArguments", false]], "absembeddermodel (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel", false]], "absembeddermodelarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModelArguments", false]], "absembedderrunner (class in flagembedding.abc.finetune.embedder)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner", false]], "absembeddersamedatasetcollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasetcollator (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasettraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset", false]], "absembeddertraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset", false]], "absembeddertrainer (class in flagembedding.abc.finetune.embedder)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer", false]], "absllmrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerCollator", false]], "absllmrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerTrainDataset", false]], "absreranker (class in flagembedding.abc.inference)": [[22, "FlagEmbedding.abc.inference.AbsReranker", false]], "absrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerCollator", false]], "absrerankerdataarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerDataArguments", false]], "absrerankermodel (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel", false]], "absrerankermodelarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModelArguments", false]], "absrerankerrunner (class in flagembedding.abc.finetune.reranker)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner", false]], "absrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset", false]], "absrerankertrainer (class in flagembedding.abc.finetune.reranker)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer", false]], "baseembedder (class in flagembedding.inference.embedder.encoder_only.base)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder", false]], "basellmembedder (class in flagembedding.inference.embedder.decoder_only.base)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder", false]], "basellmreranker (class in flagembedding.inference.reranker.decoder_only.base)": [[99, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker", false]], "basereranker (class in flagembedding.inference.reranker.encoder_only.base)": [[102, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker", false]], "bidecoderonlyembeddericlmodel (class in flagembedding.finetune.embedder.decoder_only.icl)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel", false]], "bidecoderonlyembeddermodel (class in flagembedding.finetune.embedder.decoder_only.base)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel", false]], "biencoderonlyembeddermodel (class in flagembedding.finetune.embedder.encoder_only.base)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel", false]], "colbert_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.colbert_score", false]], "compute_colbert_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_colbert_score", false]], "compute_dense_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_dense_score", false]], "compute_lexical_matching_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_lexical_matching_score", false]], "compute_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_local_score", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddertrainer method)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankertrainer method)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_loss", false]], "compute_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_score", false]], "compute_score() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_score", false]], "compute_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score", false]], "compute_score_multi_process() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_multi_process", false]], "compute_score_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_single_device", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.base.basellmreranker)": [[99, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.layerwise.layerwisellmreranker)": [[100, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.lightweight.lightweightllmreranker)": [[101, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.encoder_only.base.basereranker)": [[102, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker.compute_score_single_gpu", false]], "compute_score_single_gpu() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score_single_gpu", false]], "compute_sparse_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_sparse_score", false]], "convert_id_to_token() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.convert_id_to_token", false]], "create_one_example() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset.create_one_example", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.base)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel", false]], "crossencodermodel (class in flagembedding.finetune.reranker.encoder_only.base)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel", false]], "decoderonlyembeddericldataarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLDataArguments", false]], "decoderonlyembeddericlmodelarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLModelArguments", false]], "decoderonlyembeddericlrunner (class in flagembedding.finetune.embedder.decoder_only.icl)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner", false]], "decoderonlyembeddericlsamedatasettraindataset (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset", false]], "decoderonlyembeddericltrainer (class in flagembedding.finetune.embedder.decoder_only.icl)": [[62, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLTrainer", false]], "decoderonlyembeddermodelarguments (class in flagembedding.finetune.embedder.decoder_only.base)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderModelArguments", false]], "decoderonlyembedderrunner (class in flagembedding.finetune.embedder.decoder_only.base)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner", false]], "decoderonlyembeddertrainer (class in flagembedding.finetune.embedder.decoder_only.base)": [[79, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderTrainer", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.base)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.base)": [[56, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerTrainer", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[84, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerTrainer", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.base.basellmembedder attribute)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder attribute)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.base.baseembedder attribute)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.m3.m3embedder attribute)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.DEFAULT_POOLING_METHOD", false]], "distill_loss() (flagembedding.abc.finetune.embedder.absembeddermodel static method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.distill_loss", false]], "embedderoutput (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.EmbedderOutput", false]], "embeddertrainercallbackfordatarefresh (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh", false]], "enable_input_require_grads() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.enable_input_require_grads", false]], "encode() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.encode", false]], "encode() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.encode", false]], "encode() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.base.crossdecodermodel method)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.encoder_only.base.crossencodermodel method)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode", false]], "encode_corpus() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_corpus", false]], "encode_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_multi_process", false]], "encode_multi_process() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.encode_multi_process", false]], "encode_queries() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_queries", false]], "encode_queries_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries_single_device", false]], "encode_single_device() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_single_device", false]], "encoderonlyembedderm3model (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model", false]], "encoderonlyembedderm3modelarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelArguments", false]], "encoderonlyembedderm3modelforinference (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference", false]], "encoderonlyembedderm3runner (class in flagembedding.finetune.embedder.encoder_only.m3)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner", false]], "encoderonlyembedderm3trainer (class in flagembedding.finetune.embedder.encoder_only.m3)": [[72, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Trainer", false]], "encoderonlyembedderm3trainingarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3TrainingArguments", false]], "encoderonlyembedderrunner (class in flagembedding.finetune.embedder.encoder_only.base)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner", false]], "encoderonlyembeddertrainer (class in flagembedding.finetune.embedder.encoder_only.base)": [[67, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderTrainer", false]], "encoderonlyrerankerrunner (class in flagembedding.finetune.reranker.encoder_only.base)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner", false]], "encoderonlyrerankertrainer (class in flagembedding.finetune.reranker.encoder_only.base)": [[89, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerTrainer", false]], "ensemble_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.ensemble_score", false]], "flagautomodel (class in flagembedding.inference)": [[92, "FlagEmbedding.inference.FlagAutoModel", false]], "flagautoreranker (class in flagembedding.inference)": [[93, "FlagEmbedding.inference.FlagAutoReranker", false]], "forward() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.forward", false]], "forward() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3modelforinference method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference.forward", false]], "forward() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.forward", false]], "from_finetuned() (flagembedding.inference.flagautomodel class method)": [[92, "FlagEmbedding.inference.FlagAutoModel.from_finetuned", false]], "from_finetuned() (flagembedding.inference.flagautoreranker class method)": [[93, "FlagEmbedding.inference.FlagAutoReranker.from_finetuned", false]], "get_detailed_example() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder static method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.get_detailed_example", false]], "get_detailed_inputs() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_inputs", false]], "get_detailed_instruct() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_detailed_instruct", false]], "get_detailed_instruct() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_instruct", false]], "get_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.get_local_score", false]], "get_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner static method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.get_model", false]], "get_target_devices() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_target_devices", false]], "get_target_devices() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_target_devices", false]], "gradient_checkpointing_enable() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.gradient_checkpointing_enable", false]], "iclllmembedder (class in flagembedding.inference.embedder.decoder_only.icl)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder", false]], "layerwisellmreranker (class in flagembedding.inference.reranker.decoder_only.layerwise)": [[100, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker", false]], "lightweightllmreranker (class in flagembedding.inference.reranker.decoder_only.lightweight)": [[101, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker", false]], "load_data_collator() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_data_collator", false]], "load_data_collator() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_data_collator", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_train_dataset() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_train_dataset", false]], "load_trainer() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_trainer", false]], "m3embedder (class in flagembedding.inference.embedder.encoder_only.m3)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder", false]], "on_epoch_end() (flagembedding.abc.finetune.embedder.embeddertrainercallbackfordatarefresh method)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh.on_epoch_end", false]], "pooling() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.pooling", false]], "refresh_epoch() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset.refresh_epoch", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.base)": [[76, "FlagEmbedding.finetune.reranker.decoder_only.base.RerankerModelArguments", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[81, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.RerankerModelArguments", false]], "rerankeroutput (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.RerankerOutput", false]], "run() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.run", false]], "run() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.run", false]], "save() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.save", false]], "save() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.save", false]], "save_pretrained() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save_pretrained", false]], "set_examples() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.set_examples", false]], "start_multi_process_pool() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.start_multi_process_pool", false]], "start_multi_process_pool() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.start_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.stop_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.stop_multi_process_pool", false]]}, "objects": {"FlagEmbedding.abc.finetune.embedder": [[10, 0, 1, "", "AbsEmbedderCollator"], [15, 0, 1, "", "AbsEmbedderDataArguments"], [11, 0, 1, "", "AbsEmbedderModel"], [15, 0, 1, "", "AbsEmbedderModelArguments"], [12, 0, 1, "", "AbsEmbedderRunner"], [10, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [10, 0, 1, "", "AbsEmbedderSameDatasetTrainDataset"], [10, 0, 1, "", "AbsEmbedderTrainDataset"], [13, 0, 1, "", "AbsEmbedderTrainer"], [11, 0, 1, "", "EmbedderOutput"], [10, 0, 1, "", "EmbedderTrainerCallbackForDataRefresh"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel": [[11, 1, 1, "", "_compute_cross_device_neg_loss"], [11, 1, 1, "", "_compute_in_batch_neg_loss"], [11, 1, 1, "", "_compute_no_in_batch_neg_loss"], [11, 1, 1, "", "_dist_gather_tensor"], [11, 1, 1, "", "compute_local_score"], [11, 1, 1, "", "compute_loss"], [11, 1, 1, "", "compute_score"], [11, 1, 1, "", "distill_loss"], [11, 1, 1, "", "encode"], [11, 1, 1, "", "forward"], [11, 1, 1, "", "get_local_score"], [11, 1, 1, "", "save"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner": [[12, 1, 1, "", "load_data_collator"], [12, 1, 1, "", "load_tokenizer_and_model"], [12, 1, 1, "", "load_train_dataset"], [12, 1, 1, "", "load_trainer"], [12, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset": [[10, 1, 1, "", "_create_batch_data"], [10, 1, 1, "", "_get_file_batch_size"], [10, 1, 1, "", "_get_train_group_size"], [10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "refresh_epoch"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset": [[10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "_shuffle_text"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer": [[13, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh": [[10, 1, 1, "", "on_epoch_end"]], "FlagEmbedding.abc.finetune.reranker": [[16, 0, 1, "", "AbsLLMRerankerCollator"], [16, 0, 1, "", "AbsLLMRerankerTrainDataset"], [16, 0, 1, "", "AbsRerankerCollator"], [9, 0, 1, "", "AbsRerankerDataArguments"], [17, 0, 1, "", "AbsRerankerModel"], [9, 0, 1, "", "AbsRerankerModelArguments"], [18, 0, 1, "", "AbsRerankerRunner"], [16, 0, 1, "", "AbsRerankerTrainDataset"], [19, 0, 1, "", "AbsRerankerTrainer"], [17, 0, 1, "", "RerankerOutput"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel": [[17, 1, 1, "", "compute_loss"], [17, 1, 1, "", "enable_input_require_grads"], [17, 1, 1, "", "encode"], [17, 1, 1, "", "forward"], [17, 1, 1, "", "gradient_checkpointing_enable"], [17, 1, 1, "", "save"], [17, 1, 1, "", "save_pretrained"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner": [[18, 1, 1, "", "load_data_collator"], [18, 1, 1, "", "load_tokenizer_and_model"], [18, 1, 1, "", "load_train_dataset"], [18, 1, 1, "", "load_trainer"], [18, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset": [[16, 1, 1, "", "_load_dataset"], [16, 1, 1, "", "_shuffle_text"], [16, 1, 1, "", "create_one_example"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer": [[19, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.inference": [[21, 0, 1, "", "AbsEmbedder"], [22, 0, 1, "", "AbsReranker"]], "FlagEmbedding.abc.inference.AbsEmbedder": [[21, 1, 1, "", "_concatenate_results_from_multi_process"], [21, 1, 1, "", "_encode_multi_process_worker"], [21, 1, 1, "", "encode"], [21, 1, 1, "", "encode_corpus"], [21, 1, 1, "", "encode_multi_process"], [21, 1, 1, "", "encode_queries"], [21, 1, 1, "", "encode_single_device"], [21, 1, 1, "", "get_detailed_instruct"], [21, 1, 1, "", "get_target_devices"], [21, 1, 1, "", "start_multi_process_pool"], [21, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.abc.inference.AbsReranker": [[22, 1, 1, "", "_encode_multi_process_worker"], [22, 1, 1, "", "compute_score"], [22, 1, 1, "", "compute_score_single_gpu"], [22, 1, 1, "", "encode_multi_process"], [22, 1, 1, "", "get_detailed_inputs"], [22, 1, 1, "", "get_detailed_instruct"], [22, 1, 1, "", "get_target_devices"], [22, 1, 1, "", "start_multi_process_pool"], [22, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.finetune.embedder.decoder_only.base": [[77, 0, 1, "", "BiDecoderOnlyEmbedderModel"], [53, 0, 1, "", "DecoderOnlyEmbedderModelArguments"], [78, 0, 1, "", "DecoderOnlyEmbedderRunner"], [79, 0, 1, "", "DecoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel": [[77, 1, 1, "", "_compute_similarity"], [77, 1, 1, "", "_sentence_embedding"], [77, 1, 1, "", "compute_loss"], [77, 1, 1, "", "compute_score"], [77, 1, 1, "", "enable_input_require_grads"], [77, 1, 1, "", "encode"], [77, 1, 1, "", "gradient_checkpointing_enable"], [77, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner": [[78, 1, 1, "", "load_tokenizer_and_model"], [78, 1, 1, "", "load_trainer"], [78, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl": [[59, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [60, 0, 1, "", "BiDecoderOnlyEmbedderICLModel"], [58, 0, 1, "", "DecoderOnlyEmbedderICLDataArguments"], [58, 0, 1, "", "DecoderOnlyEmbedderICLModelArguments"], [61, 0, 1, "", "DecoderOnlyEmbedderICLRunner"], [59, 0, 1, "", "DecoderOnlyEmbedderICLSameDatasetTrainDataset"], [62, 0, 1, "", "DecoderOnlyEmbedderICLTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel": [[60, 1, 1, "", "_compute_similarity"], [60, 1, 1, "", "_sentence_embedding"], [60, 1, 1, "", "compute_loss"], [60, 1, 1, "", "compute_score"], [60, 1, 1, "", "enable_input_require_grads"], [60, 1, 1, "", "encode"], [60, 1, 1, "", "gradient_checkpointing_enable"], [60, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner": [[61, 1, 1, "", "load_tokenizer_and_model"], [61, 1, 1, "", "load_train_dataset"], [61, 1, 1, "", "load_trainer"], [61, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, 1, 1, "", "_create_batch_data"]], "FlagEmbedding.finetune.embedder.encoder_only.base": [[65, 0, 1, "", "BiEncoderOnlyEmbedderModel"], [66, 0, 1, "", "EncoderOnlyEmbedderRunner"], [67, 0, 1, "", "EncoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel": [[65, 1, 1, "", "_compute_similarity"], [65, 1, 1, "", "_sentence_embedding"], [65, 1, 1, "", "compute_loss"], [65, 1, 1, "", "compute_score"], [65, 1, 1, "", "enable_input_require_grads"], [65, 1, 1, "", "encode"], [65, 1, 1, "", "gradient_checkpointing_enable"], [65, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner": [[66, 1, 1, "", "load_tokenizer_and_model"], [66, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.embedder.encoder_only.m3": [[70, 0, 1, "", "EncoderOnlyEmbedderM3Model"], [69, 0, 1, "", "EncoderOnlyEmbedderM3ModelArguments"], [70, 0, 1, "", "EncoderOnlyEmbedderM3ModelForInference"], [71, 0, 1, "", "EncoderOnlyEmbedderM3Runner"], [72, 0, 1, "", "EncoderOnlyEmbedderM3Trainer"], [69, 0, 1, "", "EncoderOnlyEmbedderM3TrainingArguments"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model": [[70, 1, 1, "", "_colbert_embedding"], [70, 1, 1, "", "_compute_similarity"], [70, 1, 1, "", "_dense_embedding"], [70, 1, 1, "", "_encode"], [70, 1, 1, "", "_get_queries_attention_mask"], [70, 1, 1, "", "_sparse_embedding"], [70, 1, 1, "", "compute_colbert_score"], [70, 1, 1, "", "compute_dense_score"], [70, 1, 1, "", "compute_loss"], [70, 1, 1, "", "compute_score"], [70, 1, 1, "", "compute_sparse_score"], [70, 1, 1, "", "enable_input_require_grads"], [70, 1, 1, "", "encode"], [70, 1, 1, "", "ensemble_score"], [70, 1, 1, "", "forward"], [70, 1, 1, "", "gradient_checkpointing_enable"], [70, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference": [[70, 1, 1, "", "forward"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner": [[71, 1, 1, "", "get_model"], [71, 1, 1, "", "load_tokenizer_and_model"], [71, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.reranker.decoder_only.base": [[54, 0, 1, "", "CrossDecoderModel"], [55, 0, 1, "", "DecoderOnlyRerankerRunner"], [56, 0, 1, "", "DecoderOnlyRerankerTrainer"], [76, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel": [[54, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner": [[55, 1, 1, "", "load_tokenizer_and_model"], [55, 1, 1, "", "load_trainer"], [55, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise": [[82, 0, 1, "", "CrossDecoderModel"], [83, 0, 1, "", "DecoderOnlyRerankerRunner"], [84, 0, 1, "", "DecoderOnlyRerankerTrainer"], [81, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel": [[82, 1, 1, "", "encode"], [82, 1, 1, "", "forward"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner": [[83, 1, 1, "", "load_tokenizer_and_model"], [83, 1, 1, "", "load_trainer"], [83, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.encoder_only.base": [[87, 0, 1, "", "CrossEncoderModel"], [88, 0, 1, "", "EncoderOnlyRerankerRunner"], [89, 0, 1, "", "EncoderOnlyRerankerTrainer"]], "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel": [[87, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner": [[88, 1, 1, "", "load_tokenizer_and_model"], [88, 1, 1, "", "load_trainer"]], "FlagEmbedding.inference": [[92, 0, 1, "", "FlagAutoModel"], [93, 0, 1, "", "FlagAutoReranker"]], "FlagEmbedding.inference.FlagAutoModel": [[92, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.FlagAutoReranker": [[93, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.embedder.decoder_only.base": [[94, 0, 1, "", "BaseLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder": [[94, 2, 1, "", "DEFAULT_POOLING_METHOD"], [94, 1, 1, "", "encode"], [94, 1, 1, "", "encode_corpus"], [94, 1, 1, "", "encode_queries"], [94, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.embedder.decoder_only.icl": [[95, 0, 1, "", "ICLLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder": [[95, 2, 1, "", "DEFAULT_POOLING_METHOD"], [95, 1, 1, "", "encode"], [95, 1, 1, "", "encode_corpus"], [95, 1, 1, "", "encode_queries"], [95, 1, 1, "", "encode_queries_single_device"], [95, 1, 1, "", "encode_single_device"], [95, 1, 1, "", "get_detailed_example"], [95, 1, 1, "", "set_examples"]], "FlagEmbedding.inference.embedder.encoder_only.base": [[97, 0, 1, "", "BaseEmbedder"]], "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder": [[97, 2, 1, "", "DEFAULT_POOLING_METHOD"], [97, 1, 1, "", "encode"], [97, 1, 1, "", "encode_corpus"], [97, 1, 1, "", "encode_single_device"], [97, 1, 1, "", "pooling"]], "FlagEmbedding.inference.embedder.encoder_only.m3": [[98, 0, 1, "", "M3Embedder"]], "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder": [[98, 2, 1, "", "DEFAULT_POOLING_METHOD"], [98, 1, 1, "", "colbert_score"], [98, 1, 1, "", "compute_lexical_matching_score"], [98, 1, 1, "", "compute_score"], [98, 1, 1, "", "compute_score_multi_process"], [98, 1, 1, "", "compute_score_single_device"], [98, 1, 1, "", "convert_id_to_token"], [98, 1, 1, "", "encode"], [98, 1, 1, "", "encode_corpus"], [98, 1, 1, "", "encode_queries"], [98, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.reranker.decoder_only.base": [[99, 0, 1, "", "BaseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker": [[99, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise": [[100, 0, 1, "", "LayerWiseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker": [[100, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight": [[101, 0, 1, "", "LightweightLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker": [[101, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.encoder_only.base": [[102, 0, 1, "", "BaseReranker"]], "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker": [[102, 0, 1, "", "compute_score_single_gpu"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "terms": {"": [13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 71, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 110, 111, 112, 113, 116, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 144], "0": [9, 10, 11, 15, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 99, 100, 101, 113, 115, 116, 121, 122, 126, 130, 131, 132], "00": [122, 124, 135, 136, 140], "000": [108, 135], "00000004": 121, "00000005": 121, "00016697": 122, "00089447": 122, "001": 136, "00146474": 122, "00310114": 122, "00329455": 122, "00368039": 122, "0043185e": 122, "00599566": 122, "00683443": 111, "00755427": 122, "0075684": 122, "00756918": 111, "00786822": 122, "00790005": 111, "00805702": 122, "00806659": 111, "00819298": 122, "00880391988903284": 124, "0093503": 122, "00991": 136, "00996143": 122, "01": [132, 140], "01041734": 122, "010771302313529425": 136, "010771302313530132": 136, "01113793": 122, "01337725": 122, "01374448": 122, "01503995": 122, "01651684": 122, "01709837": 122, "01715658": 122, "01777726": 122, "01805054": 122, "01843987": 122, "02": [69, 122, 123, 135], "02270943": 111, "02311821": 122, "02357143": 111, "02385841": 122, "02397249": 122, "02429199": 122, "02575599": 122, "02722942": 122, "02838556": 111, "02961654": 122, "02993429": 122, "03": [122, 123, 130, 136], "03038301": 111, "03216": 143, "03260205": 122, "03411707": 122, "03611493": 111, "036222943297402846": 136, "0371782e": 123, "0377209694331257": 136, "037720969433127145": 136, "0379632e": 122, "03835309": 122, "03855301": 122, "038790629929866066": 136, "03879062992990034": 136, "0389353e": 122, "03919311": 122, "039217": 122, "03977485677045894": 136, "039774856770459645": 136, "03988946": 122, "04": [122, 123, 132], "040755156": [122, 124], "04147115653921931": 136, "04356123278888682": 136, "04374858": 111, "04479263": 122, "0449261e": 122, "045134712": [122, 124], "04707828": 122, "04716": 136, "04828531": 122, "05": [24, 69, 122, 123, 124], "050144322": [122, 124], "05022853": 122, "05069073": 122, "05281549383775287": 136, "05432154580979357": 136, "05457945565481172": 136, "05474931": 122, "05985384": 122, "060962623117325254": 136, "06255283252590663": 136, "06259296677860492": 136, "06342201": [122, 124], "06389635013430676": 136, "06396189194646361": 136, "06509776": 122, "06690213479396273": 136, "06it": 136, "07185174301688693": 136, "07364476417961506": 136, "07404093236468848": 136, "07501290390362861": 136, "07507962333910836": 136, "07692307692307693": 126, "077": 126, "08": 69, "081469566": [122, 124], "08164985279853691": 136, "082762718200684": 126, "083": 126, "08333333333333333": 126, "08362077": [122, 124], "088312": 132, "08841": 136, "09038": 130, "09705499215630589": 136, "09824591983546396": 136, "1": [10, 11, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 98, 101, 105, 112, 113, 114, 115, 116], "10": [27, 32, 39, 42, 111, 115, 122, 124, 127, 129, 132, 133, 135, 140, 142], "100": [16, 24, 27, 32, 35, 39, 42, 108, 113, 114, 122, 124, 127, 133, 135, 136, 140, 142], "1000": [24, 27, 32, 35, 39, 42, 130, 131, 132, 136, 143, 144], "10000": 133, "1000000": 133, "100000000": [9, 15, 58], "101": 123, "102": 123, "1024": [24, 27, 32, 35, 42, 121, 124, 126], "10292184602358935": 136, "10292184602358977": 136, "102m": [116, 122], "104": 132, "1045": 123, "104569": 132, "106": 133, "107": 132, "10744937823276134": 136, "10744937823276193": 136, "109m": [116, 122], "10k": 35, "11": [114, 123, 127, 130, 132, 133], "110": 133, "111": [122, 130], "112": 130, "11284619565817842": 136, "113": 130, "114": 132, "11598700704312062": 136, "116": [130, 132], "11679": 122, "117": [130, 132], "11min": 133, "12": [122, 123, 132, 133, 136], "122": 132, "12347288098914058": 136, "124": 132, "12457339152558143": 136, "125": 132, "128": [9, 10, 15, 16, 22, 58, 59, 99, 100, 101, 102, 131, 132, 133], "12807325096717753": 136, "12841084787822227": 136, "12898192060943495": 136, "12942556865700913": 136, "12964639": [122, 124], "12964855554504057": 136, "12969109830101241": 136, "13": [39, 127, 130, 132, 133], "130": 132, "1300413865104607": 136, "13097093150054095": 136, "131": 132, "13118224861025093": 136, "13164524259533786": 136, "13168797291549253": 136, "13241573571401533": 136, "133": [116, 122], "1340775377068567": 136, "13440904793529648": 136, "1346130730317385": 136, "135": 132, "13522755012490456": 136, "13522755012490692": 136, "1355361594910923": 136, "13689369": [122, 124], "137": 132, "1378988612808882": 136, "13794450668758515": 136, "138": 132, "1382786098284509": 136, "13914318784294258": 136, "1396047981645623": 136, "14": [127, 132, 133, 136, 142], "14012953903010958": 136, "14012953903010988": 136, "1404708e": 122, "141": 132, "1410889527057097": 136, "14108895270570979": 136, "144": 132, "14726476953035533": 136, "149": 133, "14976954460144": 136, "15": [132, 133, 136, 142], "150": [133, 142, 143, 144], "15149": 136, "15236205846534961": 136, "15256475371124711": 136, "1536": 121, "1557795701081579": 136, "156": 132, "15610387932529113": 136, "15620049317363813": 136, "158": 132, "158875": 130, "15919987960292029": 136, "15930478114759905": 136, "15934819555197366": 136, "15956349246366208": 136, "16": [32, 53, 58, 76, 81, 127, 130, 131, 132, 133], "1604091882521101": 136, "16057318234658585": 136, "161": 132, "162": 132, "16231721725673165": 136, "163": 132, "1657018523692905": 136, "166": 132, "167": 132, "16823918613191954": 136, "16823918613192046": 136, "169": [132, 133], "17": [127, 133, 136], "170": [105, 113, 132], "17001738": [122, 124], "172": 132, "17346152653542332": 136, "175": 132, "176": 132, "179": 132, "17953": 123, "17min": 133, "18": [32, 127, 130, 133, 143], "180": 132, "1800": 69, "184": 132, "186": 132, "187": 132, "188": [131, 132], "189": 132, "19": [112, 127], "192": 132, "193": 132, "19554448500275612": 124, "197": 131, "199": [131, 132], "1998": 123, "1b": 112, "1e": [69, 123, 124], "1min": 133, "1st": 116, "2": [32, 42, 101, 112, 113, 114, 115, 121], "20": [35, 127, 132, 133, 135, 142], "201": 132, "2023": [32, 116], "205": 132, "206": 132, "2082448e": 122, "21": [127, 132, 133, 135, 140], "210": 132, "21061528": 121, "2125367e": 122, "214": 132, "215": 132, "218": [132, 133], "219": 132, "22": [127, 133, 135, 140], "220": 132, "221": 132, "22238": 136, "22279659689895054": 136, "22279659689895104": 136, "2251": 130, "226": 132, "228": 132, "228780": 122, "229": 132, "2293": 123, "22it": 122, "23": [124, 127], "23025740175221762": 136, "23025740175221865": 136, "232": 132, "2320": 122, "233": 132, "2359587e": 122, "2361": 123, "237": 132, "238": 132, "24": [114, 115, 124, 127], "240131": 124, "2402": 143, "241": 132, "245": 132, "247": 132, "24906276": 121, "24b": 140, "24m": [116, 122], "25": [124, 127, 142], "250002": 124, "251": 132, "25167602": [122, 124], "25186998": [122, 124], "255": 132, "256": [21, 22, 94, 95, 97, 98, 114, 122, 132, 135, 140], "257435": 131, "2588": 122, "26": [35, 127, 130], "260": 136, "262": 122, "26957875": [122, 124], "26it": 136, "27": [113, 115, 122, 132], "272": 136, "27280585498859483": 124, "276": 122, "278m": [114, 140], "28": [112, 115, 127, 132], "2811369e": 122, "2842189e": 122, "2892313928157665": 136, "2892313928157675": 136, "29": 130, "2911752e": 122, "2998275e": 123, "2b": 140, "2min": 133, "3": [39, 42, 69, 70, 99, 100, 101, 102, 112, 114, 116, 121, 123, 132], "30": [122, 124, 127, 132, 133, 142], "300": 142, "3000": 105, "30057": 130, "30502": 130, "30522": 123, "3072": 123, "31": [130, 133], "31969923": 121, "32": [9, 10, 15, 16, 58, 59, 122, 131, 132, 133, 137, 138], "3211860920443005": 136, "32118609204433185": 136, "3214332e": 123, "32672375": 111, "326m": [116, 122], "327": 111, "3298163165186628": 127, "33": [116, 122, 130, 132], "330": 132, "333": 126, "3333333333333333": 126, "33353207": [122, 124], "335": 122, "335m": [116, 122], "34": [116, 122, 132], "342316": 130, "345639616995194": 136, "3456396169952022": 136, "34739798": 121, "34749585": 124, "349868": 124, "35": [132, 138], "35350388": 111, "354": 111, "3577225e": 122, "35it": 140, "36": [133, 136], "363": 122, "36308263419153386": 136, "3630826341915611": 136, "3666666666666667": 127, "36792332": 111, "368": 111, "3698": 123, "37": 133, "3767978": 129, "37858668": 129, "384": 121, "3894034e": 122, "3911421e": 122, "392": 131, "3924331e": 123, "39290053": 111, "393": 111, "394": 111, "39446455": 111, "3f": 111, "3min": 133, "4": [17, 42, 54, 82, 87, 99, 100, 101, 102, 132], "40": [115, 142], "400": 142, "40196604": 111, "402": 111, "40754": 136, "4083": 123, "409": [116, 122], "4091221e": 122, "4096": 124, "41": [132, 136], "4139402560455192": 136, "419": 133, "42": [69, 132], "42427146": 129, "43": 132, "438": [116, 122], "44": [132, 136], "44429": 130, "45": 132, "4549762e": 123, "46": [112, 132, 133], "4621177911758423": 124, "4626108": 111, "463": 111, "4667": 123, "471": [131, 132], "4740132817599919": 136, "4740132817600036": 136, "474676132202148": 140, "47721898396760526": 136, "4772189839676386": 136, "48": 132, "4865": 122, "4884483e": 122, "49": [130, 132], "4m": [116, 122], "4o": [142, 143, 144], "4x": 132, "5": [27, 39, 42, 45, 105, 110, 111, 112, 113, 115, 117, 121, 123, 124, 131, 132, 136, 137, 138, 142, 143, 144], "50": 142, "500": [69, 129, 142], "5000": [135, 140], "5030322e": 122, "5092714e": 123, "5097007": 129, "51": 132, "512": [9, 21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 122, 123], "51932": 136, "51b": [115, 140], "52": 132, "5208629682313899": 136, "521": 132, "527691": 129, "528": 111, "5284606": 111, "5331": [135, 140], "5337047390639782": 124, "54023": 136, "5409331": 129, "5429113323850182": 136, "5475257e": 122, "55": 132, "550": 133, "5543230e": 122, "55717": 136, "55773": 136, "56": [130, 132, 136, 137], "5603739077423295": 136, "560m": [114, 140], "56202": 136, "563260143484355911": 35, "56344": 136, "56347": 136, "564661930998293": 136, "5660817425350153": 136, "5661121884705748": 136, "568": 133, "5684842": 122, "568m": [115, 122, 140], "569m": 113, "57": 132, "5703944e": 123, "57525384": 121, "58": 133, "5845405e": 122, "5856720000000037": 133, "5895271e": 122, "59": [132, 140], "59190154": 121, "5931472182273865": 126, "59364545": 129, "59461": 136, "595": 133, "5955665344840209": 127, "598": 133, "5983": 122, "5989914": 122, "5e": 69, "6": [42, 111, 122, 123, 126, 127, 130, 132, 135, 138], "60": 142, "600": 142, "602461": 132, "603": 111, "6031525": 111, "6062041": 129, "6077381": 123, "608": 111, "6082418": 111, "62": 133, "6210502": 121, "625": 126, "6252808e": 132, "6259035": 124, "63": 132, "630898999999999": 133, "63276503": 121, "63616": 136, "64": [53, 58, 76, 81, 132, 133], "64720015": 121, "6511828e": 132, "65131": 136, "6561864e": 122, "658928": 131, "660": 133, "66063": 136, "6613": 136, "6658131e": 132, "6666666666666666": 127, "66714": 136, "6686779": 129, "6726490e": 122, "6754939e": 122, "6782462": 124, "68": [126, 132, 140], "6840411e": 123, "6852231e": 122, "6860173e": 122, "69": 133, "697673": 121, "7": [42, 45, 111, 112, 122, 126, 127, 129, 133, 137], "70": [112, 132], "71": 132, "714613139629364": 126, "7206438e": 123, "7268854e": 122, "72b": [115, 140], "736794": 122, "74": 132, "742325": 130, "7446640729904175": 126, "7461165": 122, "746731": 132, "75747": 136, "76226806640625": 140, "768": [111, 121, 123, 129, 130, 131, 132, 135, 140, 142, 144], "7761475e": 123, "7796662449836731": 124, "7861": 123, "7900386": 121, "7min": 133, "8": [9, 15, 58, 69, 81, 82, 101, 111, 116, 122, 123, 124, 127, 129, 130, 131, 132, 133], "80": 133, "802726686000824": 126, "8055555555555555": 127, "8074074074074075": 127, "8192": [39, 113, 122, 124], "8194": 124, "823843240737915": 140, "823908": 132, "8240882158279419": 126, "8270": 123, "83": 122, "831": 133, "8333333333333334": 127, "8384371e": 122, "84": [132, 133], "8417887e": 123, "8445771e": 122, "8462474": 122, "849915": 130, "85341793": 122, "862962962962963": 127, "87": [132, 133], "8714428e": 122, "8721525e": 123, "87282517": 121, "8765034e": 122, "88": 132, "88407": 136, "8921868e": 122, "8961012e": 122, "8963409999999716": 133, "89705944": 122, "899": 132, "9": [69, 111, 115, 122, 123, 127, 129, 130, 140], "90": 132, "90017": 122, "90914035": 122, "91": 132, "911423": 132, "9166666666666666": 127, "91it": [124, 135], "93": 132, "9331330e": 122, "94": [130, 133], "9431": 136, "946": 132, "95": [116, 122], "96": 58, "97": [135, 140], "9803897e": 122, "9825": [135, 140], "9869253606521631": [135, 140], "99": 140, "990444999999872": 133, "9905590e": 122, "99147": 136, "995": 140, "9963092975357145": 140, "99644": 136, "999": 69, "9999189999999997": 133, "9999997": [121, 123], "99999976": 121, "9999998": 121, "9999999": [121, 123], "99999994": 121, "99999997": 121, "99999998": 121, "99999999": 121, "9b": 140, "9min": 133, "A": [11, 13, 16, 19, 21, 22, 70, 71, 98, 99, 100, 101, 108, 112, 121, 122, 126, 129, 137, 138, 142, 143, 144], "And": [111, 126, 127, 129, 130, 133, 137], "As": [112, 123, 133], "But": [105, 112, 121, 126, 131, 133], "By": [13, 19, 112, 130, 143, 144], "For": [105, 107, 113, 114, 115, 116, 121, 122, 123, 126, 131, 132, 133, 136, 137, 138, 140, 143, 144], "If": [11, 13, 19, 21, 22, 60, 65, 70, 71, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 107, 108, 110, 122, 123, 124, 129, 130, 135, 142, 143, 144], "In": [105, 108, 111, 112, 122, 123, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145], "It": [21, 22, 24, 27, 42, 45, 108, 112, 113, 122, 123, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 144], "No": [105, 121, 129], "One": [10, 59, 111], "Or": [24, 27, 32, 35, 39, 42, 45, 138, 143], "That": [121, 131, 143], "The": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 32, 35, 39, 45, 54, 59, 60, 61, 65, 70, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 109, 111, 112, 113, 114, 116, 121, 122, 123, 124, 126, 127, 130, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "Their": 121, "Then": [39, 105, 110, 113, 116, 121, 123, 124, 126, 127, 129, 131, 132, 133, 136, 137, 138, 142, 143, 144], "There": [119, 121, 126, 130, 131], "These": [108, 142], "To": [114, 116, 118, 119, 121, 122, 123, 145], "With": 144, "_": [111, 127, 130, 135, 140], "__init__": 138, "_colbert_embed": [49, 50, 63, 68, 70], "_compute_cross_device_neg_loss": [0, 7, 8, 11], "_compute_in_batch_neg_loss": [0, 7, 8, 11], "_compute_no_in_batch_neg_loss": [0, 7, 8, 11], "_compute_similar": [49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "_concatenate_results_from_multi_process": [0, 20, 21], "_create_batch_data": [0, 7, 8, 10, 49, 50, 51, 57, 59], "_dense_embed": [49, 50, 63, 68, 70], "_description_": [70, 98], "_dist_gather_tensor": [0, 7, 8, 11], "_encod": [49, 50, 63, 68, 70, 122, 123], "_encode_multi_process_work": [0, 20, 21, 22], "_get_file_batch_s": [0, 7, 8, 10], "_get_queries_attention_mask": [49, 50, 63, 68, 70], "_get_train_group_s": [0, 7, 8, 10], "_i": 127, "_load_dataset": [0, 7, 8, 10, 14, 16], "_sentence_embed": [49, 50, 51, 57, 60, 63, 64, 65, 73, 74, 75, 77], "_shuffle_text": [0, 7, 8, 10, 14, 16], "_sparse_embed": [49, 50, 63, 68, 70], "_summary_": [70, 102], "_type_": 70, "a_i": 126, "a_norm": 126, "abc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22], "abil": [95, 112, 113, 116, 122, 137, 138], "abl": [113, 143], "about": [111, 118, 126, 131, 133, 137, 142, 143, 144], "abov": [111, 116, 127, 131], "absargu": [0, 7, 8, 14], "absdataset": [0, 7, 8, 14], "absembedd": [0, 20, 92], "absembeddercol": [0, 7, 8, 12], "absembedderdataargu": [0, 7, 10, 12, 14, 15, 66, 71, 78], "absembeddermodel": [0, 7, 8, 12, 13, 55, 61, 66, 71, 78, 83, 88], "absembeddermodelargu": [0, 7, 12, 14, 15, 66], "absembedderrunn": [0, 7, 8, 12], "absembeddersamedatasetcol": [0, 7, 8, 49, 50, 51, 57], "absembeddersamedatasettraindataset": [0, 7, 8], "absembeddertrain": [0, 7, 8], "absembeddertraindataset": [0, 7, 8, 12], "absembeddertrainingargu": [10, 12, 61, 66, 78], "absllmrerankercol": [0, 7, 14], "absllmrerankertraindataset": [0, 7, 14], "absmodel": [0, 7, 8, 14], "absrerank": [0, 20, 93], "absrerankercol": [0, 7, 14, 18], "absrerankerdataargu": [0, 7, 8, 9, 16, 18, 55, 83, 88], "absrerankermodel": [0, 7, 14, 18, 19, 55, 83, 88], "absrerankermodelargu": [0, 7, 8, 9, 18, 88], "absrerankerrunn": [0, 7, 14, 18], "absrerankertrain": [0, 7, 14], "absrerankertraindataset": [0, 7, 14, 18], "absrerankertrainingargu": [18, 55, 83, 88], "absrunn": [0, 7, 8, 14], "abstract": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 82, 112], "abstrain": [0, 7, 8, 14], "abund": 109, "academi": [111, 119, 122], "acceler": [115, 121, 124, 140], "accelerator_config": 69, "accept": [108, 129, 131, 133, 137], "access": 108, "acclaim": [111, 129], "accomplish": [121, 142, 144], "accord": [92, 93, 111, 115, 122, 137, 138], "accur": [108, 140, 143], "accuraci": [114, 131], "acheiv": 114, "achiev": [105, 112, 116], "acoust": 121, "across": [32, 35, 45, 98, 121, 127, 135, 136], "acrross": 130, "activ": [17, 24, 60, 65, 70, 77, 112, 113, 123, 124], "actor": [111, 129], "actual": [16, 105, 113, 127, 135], "ad": [113, 124, 129, 131, 132, 133], "adafactor": 69, "adam_beta1": 69, "adam_beta2": 69, "adam_epsilon": 69, "adamw_torch": 69, "add": [105, 122, 129, 130, 131, 132, 133, 135, 140, 142], "addit": [21, 22, 113, 143], "additional_special_token": [53, 58], "adjust": [60, 65, 70, 77, 115, 130], "adopt": [137, 138, 143], "advanc": 121, "advantag": 121, "advis": [21, 22], "afqmc": 138, "after": [10, 59, 97, 111, 130, 131, 137, 138, 140], "ag": 112, "aggreg": 144, "ai": [111, 129, 142], "ailuropoda": 140, "air": [23, 112], "air_bench": 24, "al": 130, "alexnet": 111, "algorithm": [131, 132], "alias": 35, "align": 35, "all": [11, 13, 19, 21, 22, 105, 111, 121, 126, 127, 129, 131, 135, 137, 138, 142, 143, 144], "all_scor": 11, "allevi": [116, 122], "alloc": 130, "allow": [112, 115, 131, 140], "almost": 130, "along": [21, 22, 95, 121], "alreadi": [108, 126, 129, 131, 133, 135, 137], "also": [13, 19, 24, 32, 45, 112, 118, 121, 122, 130, 133, 136, 137, 142, 144], "altern": 137, "although": 108, "altman": [111, 129], "alwai": 115, "am": [114, 116, 126], "amazoncounterfactualclassif": 137, "amazonpolarityclassif": 137, "amazonreviewsclassif": 137, "american": 142, "amid": 142, "among": 116, "amount": [108, 113, 121, 130, 131, 133, 143, 144], "an": [10, 21, 22, 32, 35, 39, 45, 106, 111, 113, 121, 124, 129, 131, 133, 135, 136, 137, 138, 142, 143, 144], "analysi": [108, 144], "analyz": 144, "andrew": [111, 129], "angl": 126, "ani": [16, 21, 22, 24, 70, 94, 95, 97, 98, 99, 100, 101, 102, 105, 111, 118, 131, 133], "ann": [131, 133], "anna": 126, "anoth": [99, 100, 101, 131], "answer": [35, 42, 111, 112, 122, 135, 140, 142, 143, 144], "ap": 127, "ap_sum": 127, "api": [109, 113, 116, 119, 121, 122, 123, 142, 143, 144], "appear": [111, 113, 121, 124, 138], "append": [127, 135, 140], "appli": [115, 131], "applic": [45, 105, 133, 136, 143, 144], "approach": [108, 121, 130], "appropri": [10, 12, 18, 92, 93, 107], "approxim": [131, 132], "ar": [32, 35, 100, 101, 105, 108, 109, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "architectur": [121, 140], "area": 119, "arg": [10, 13, 16, 17, 19, 39, 56, 59, 62, 67, 72, 79, 84, 89, 138], "arguana": [27, 136, 137], "argument": [0, 1, 9, 10, 12, 15, 16, 18, 49, 50, 51, 52, 55, 57, 59, 61, 63, 68, 71, 73, 74, 75, 78, 80, 83, 135], "arithmet": 108, "arrai": [21, 92, 94, 95, 97, 98, 122, 127, 135, 140, 142], "arri": 98, "art": [112, 114], "articl": 39, "artifici": [119, 122], "artist": [111, 129], "artistri": 142, "arxiv": [24, 143], "arxivclusteringp2p": 137, "arxivclusterings2": 137, "as_query_engin": 144, "as_retriev": 143, "asarrai": [121, 135, 140], "asia": 140, "ask": [105, 119, 143, 144], "askubuntudupquest": 137, "aspect": 133, "assembl": [123, 143], "assert": 130, "assess": [45, 136], "assign": [131, 137, 138], "assist": [114, 142], "assum": [127, 135], "astonish": [111, 129], "astyp": [127, 129, 130, 135, 140], "atec": 138, "ation": 124, "atmospher": 142, "attent": [70, 97, 123, 124], "attention_mask": [60, 65, 70, 77, 97, 123], "attribut": [98, 135, 144], "aug": 116, "augment": 122, "authent": 142, "auto": 69, "auto_find_batch_s": 69, "autom": 24, "automat": [92, 93, 105, 122, 132], "automodel": [60, 65, 70, 77, 123, 124], "autotoken": [11, 17, 54, 60, 65, 70, 77, 82, 87, 123, 124], "avail": [105, 137, 140, 142], "averag": [112, 113, 124, 127, 137, 138], "avg": 142, "avoid": [10, 59, 131], "award": [111, 129], "b": [99, 100, 101, 124, 126], "b_i": 126, "b_norm": 126, "baai": [24, 27, 32, 35, 39, 42, 45, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123, 124, 126, 129, 135, 136, 137, 138, 140, 142, 143, 144], "back": [98, 112], "bag": [113, 121, 124], "bake": 126, "balanc": [114, 115, 116, 133], "banh": 142, "banking77classif": 137, "bar": 142, "base": [11, 12, 17, 18, 21, 22, 27, 39, 49, 50, 51, 53, 54, 55, 56, 60, 62, 63, 65, 66, 67, 70, 73, 74, 76, 77, 78, 79, 84, 85, 87, 88, 89, 94, 97, 99, 100, 101, 102, 110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 129, 131, 135, 136, 137, 138, 140, 142, 143, 144], "base_model": [11, 17, 54, 60, 65, 70, 77, 82, 87], "baseembedd": [91, 96], "basellmembedd": [91, 94, 96], "basellmrerank": [91, 103], "basererank": [91, 103], "basic": [119, 130, 136], "basketbal": 121, "batch": [10, 11, 16, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 123, 136, 137, 138], "batch_eval_metr": 69, "batch_raw_data": [10, 59], "batch_siz": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 122, 135, 138, 140], "bcd": 142, "bear": 140, "becaus": [126, 131, 133, 143], "becom": 132, "beef": 142, "befor": [121, 126, 129, 131, 132, 133, 140], "begin": 123, "behavior": [13, 19, 112], "beij": [119, 122], "being": [13, 19, 24, 144], "beir": [23, 136, 137, 138], "beir_eval_result": 27, "below": [105, 111, 112, 129, 136, 138, 142, 143, 144], "bench": [23, 112], "bench_24": 24, "benchmark": [24, 27, 45, 116, 133, 136, 137, 138], "benchmark_vers": 24, "benefici": [111, 129], "bert": [116, 121, 122, 123], "bertattent": 123, "bertembed": 123, "bertencod": 123, "bertintermedi": 123, "bertlay": 123, "bertmodel": 123, "bertoutput": 123, "bertpool": 123, "bertselfattent": 123, "bertselfoutput": 123, "besid": [109, 119, 130], "best": [105, 111, 115, 116, 129, 133], "better": [105, 108, 114, 115, 116, 121, 140], "between": [32, 60, 65, 70, 77, 111, 112, 113, 116, 121, 124, 126, 127, 132, 137, 138, 143, 144], "bf16": [69, 99, 100, 101], "bf16_full_ev": 69, "bge": [24, 27, 32, 35, 39, 42, 45, 95, 98, 105, 106, 108, 109, 110, 111, 118, 126, 129, 135, 136, 137, 138, 140, 142, 143, 144], "bgem3flagmodel": [113, 122, 124], "bi": 108, "bia": [123, 124], "bidecoderonlyembeddericlmodel": [49, 50, 51, 57, 60], "bidecoderonlyembeddermodel": [49, 73, 74, 75, 77], "biencoderonlyembeddermodel": [49, 50, 63, 64, 65], "bin": [129, 135], "binari": [127, 131, 137, 138], "biorxivclusteringp2p": 137, "biorxivclusterings2": [45, 137], "bioss": 137, "bit": 132, "bm": 124, "bm25": [105, 113, 121, 122, 124], "bn": 32, "bool": [9, 10, 11, 13, 15, 16, 19, 21, 22, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "bot": [142, 143, 144], "both": [11, 13, 19, 105, 115, 126, 127, 135, 140, 142], "bourbon": 142, "bow": 121, "bq": 138, "brad": [111, 129], "break": [111, 127, 129, 135, 140], "brief": 142, "brute": 133, "bucket": [131, 132], "build": [106, 129, 131, 142, 143, 144], "built": [39, 130], "bunch": 142, "burden": 133, "c": [111, 116, 127, 129, 130, 131, 132, 133, 135, 140], "c22ab2a51041ffd869aaddef7af8d8215647e41a": 136, "c_mteb": 138, "cach": [24, 27, 32, 35, 39, 42, 45, 71, 94, 95, 97, 98, 99, 100, 101, 102], "cache_dir": [9, 15, 24, 32, 35, 39, 42, 45, 53, 58, 69, 71, 76, 81, 94, 95, 97, 98, 99, 100, 101, 102], "cache_path": [9, 15, 27, 32, 35, 39, 42, 58], "calc_ap": 127, "calc_map": 127, "calc_mrr": 127, "calc_precis": 127, "calc_recal": [127, 135, 140], "calcul": [105, 126, 127, 132, 135, 140], "call": [10, 11, 17, 70, 82, 122, 136, 140, 144], "callabl": [13, 19, 56, 62, 67, 72, 79, 84, 89], "callback": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "can": [21, 22, 24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105, 107, 110, 111, 112, 113, 115, 121, 122, 123, 124, 126, 129, 130, 131, 132, 133, 135, 137, 138, 142, 143, 144], "candid": [108, 113, 124], "cap": [113, 124, 126, 127], "capabl": [108, 112, 115, 127, 135, 140, 143], "capsul": 144, "captur": [108, 121, 122, 123, 124, 136, 137], "card": 116, "care": [126, 137], "case": [105, 109, 115, 121, 123, 126, 129, 130, 131, 135, 137, 143, 144], "casual": 142, "cat": [121, 140], "caus": [112, 126, 131], "caution": 137, "cd": 107, "cdc": 112, "cdist": 126, "cdot": [113, 124, 126], "cell": [121, 122, 123, 129, 131, 132, 133, 135, 143, 144], "centroid": 132, "ceo": [111, 129], "certain": 121, "chain": [142, 143], "challeng": 32, "chanc": 126, "chang": [24, 27, 32, 35, 39, 42, 45, 112, 129, 137, 138], "charact": [121, 143, 144], "characterist": 112, "chart": 112, "chat": [118, 122, 142, 143, 144], "chat_model": 143, "chatbot": [142, 143], "chatopenai": 143, "chatprompttempl": 143, "check": [112, 113, 119, 121, 122, 123, 129, 130, 131, 136, 137, 138, 143, 144, 145], "checkout": 140, "checkpoint": [17, 60, 65, 70, 77], "chees": 142, "chef": 142, "cheli": 142, "chick": 142, "chicken": 142, "child": [92, 93], "children": [21, 22], "china": 140, "chines": [114, 115, 116, 122, 138, 140, 142], "chinesetasklist": 138, "chmod": [24, 27, 32, 35, 39, 42, 45], "choic": [121, 123, 130, 131, 132, 133, 135, 142, 144], "choos": [39, 92, 93, 101, 105, 111, 115, 131, 135, 138, 143], "chose": 136, "chosen": [113, 124, 136, 144], "chunk": [143, 144], "chunk_overlap": [143, 144], "chunk_siz": [143, 144], "cinemat": [111, 129], "cl": [65, 69, 70, 97, 98, 113, 123, 124, 138], "claim": 116, "class": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 115, 119, 122, 130, 132, 135, 136, 138], "classic": 142, "classif": [121, 137, 138], "classmethod": [92, 93], "clean": 143, "clear": 126, "client": [121, 142], "climatefev": [136, 137], "clone": [107, 145], "cloner": 130, "close": [126, 142], "closer": [121, 126], "closest": [131, 132], "clsclusteringp2p": 138, "clsclusterings2": 138, "club": [111, 129], "cluster": [108, 121, 131, 132, 137, 138], "cmedqaretriev": 138, "cmedqav1": 138, "cmedqav2": 138, "cmnli": 138, "co": [113, 124, 126, 129, 130], "cobert": 98, "cobert_dim": 98, "cocktail": 142, "code": [108, 118, 119, 123, 130, 131], "codebook": 132, "coeffici": 126, "coher": 121, "colber": 70, "colbert": [70, 71, 98, 105, 113, 122, 124], "colbert_dim": [69, 71, 98], "colbert_scor": [70, 91, 96, 98, 124], "colbert_vec": [98, 113, 122, 124], "colbert_weight": 70, "collat": [10, 12, 16, 18, 59], "collect": [118, 121, 122], "collis": 131, "com": [105, 107, 110, 133], "combin": [21, 22, 95, 130, 133], "combine_docu": 143, "come": [35, 121, 142], "comfort": 142, "command": [137, 138], "commerci": 105, "common": [112, 113, 122, 131], "commonli": [105, 112, 123, 144], "commun": [105, 119, 121, 143], "compar": [126, 127, 131, 135, 137], "comparison": [108, 133], "compet": 136, "competit": [116, 122], "compl": [10, 59], "complet": [21, 22, 95, 140, 142, 144], "complex": [121, 133, 144], "compliment": 142, "composit": 130, "compound": 113, "comprehens": 42, "compress": [101, 115, 131, 132, 140], "compress_lay": [101, 115], "compress_ratio": [101, 115], "compris": [35, 137, 138], "comput": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 92, 93, 94, 97, 98, 99, 100, 101, 102, 108, 110, 111, 113, 115, 121, 122, 124, 126, 127, 129, 131, 132, 133, 137, 140], "compute_cod": 132, "compute_colbert_scor": [49, 50, 63, 68, 70], "compute_dense_scor": [49, 50, 63, 68, 70], "compute_lexical_matching_scor": [91, 96, 98, 124], "compute_local_scor": [0, 7, 8, 11], "compute_loss": [0, 7, 8, 11, 13, 14, 17, 19, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "compute_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "compute_recal": 133, "compute_scor": [0, 7, 8, 11, 20, 22, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 91, 96, 98, 114, 115, 140], "compute_score_func": 11, "compute_score_multi_process": [91, 96, 98], "compute_score_single_devic": [91, 96, 98], "compute_score_single_gpu": [0, 20, 22, 91, 99, 100, 101, 102, 103], "compute_sparse_scor": [49, 50, 63, 68, 70], "comupt": [113, 124], "comuput": 132, "concaten": [11, 21, 22, 122], "concept": 108, "concis": [111, 129, 137], "conclus": 126, "conda": [129, 130, 131, 132, 133], "config": [21, 22, 99, 100, 101], "config_nam": [9, 15, 53, 58, 69, 76, 81], "configur": 112, "congrat": 135, "connect": [105, 110, 112, 121, 131, 144], "consid": [121, 127, 131, 133, 135], "consider": 126, "constitut": 39, "construct": [131, 143, 144], "consum": [108, 129, 131, 135, 137], "consumpt": 16, "contain": [16, 21, 22, 24, 32, 45, 70, 71, 112, 114, 119, 123, 127, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144], "content": [109, 119, 136, 137, 138, 142, 143], "context": [108, 112, 115, 121, 122, 140, 143, 144], "context_str": 144, "continuum": 32, "contribut": [111, 112, 129], "control": [10, 11, 60, 65, 70, 77, 130], "convers": [16, 122], "convert": [98, 108, 123], "convert_id_to_token": [91, 96, 98, 124], "convert_to_numpi": [21, 94, 95, 97, 122, 123, 142], "convini": 126, "convsearch": 122, "coordin": 126, "copi": [137, 138], "core": [109, 144], "corpu": [21, 39, 94, 95, 97, 98, 111, 113, 121, 122, 127, 129, 130, 133, 135, 137, 138, 140, 142, 143], "corpus_embd": [27, 32, 35, 39, 42], "corpus_embd_save_dir": [27, 32, 35, 39, 42], "corpus_embed": [111, 129, 135, 140], "corpus_s": 130, "correct": [123, 126, 143], "correctli": [127, 135, 143], "correl": [137, 138], "correspond": [111, 122, 123, 130, 132, 135], "cos_1": 126, "cos_dist1_2": 126, "cos_dist1_3": 126, "cosin": [108, 137, 138], "cosine_similar": 126, "cost": [105, 113, 114, 121, 124, 131, 135, 142], "could": [111, 121, 131, 143, 144], "courpu": [111, 129], "cours": [111, 129, 142], "coursera": [111, 129], "cover": [24, 39, 105, 109, 111, 113, 127, 133, 136], "coverag": 131, "covidretriev": 138, "cpu": [21, 22, 105, 116, 131, 132, 133, 135, 140, 142], "cqadupstack": [27, 136], "cqadupstackandroidretriev": [136, 137], "cqadupstackenglishretriev": [136, 137], "cqadupstackgamingretriev": [136, 137], "cqadupstackgisretriev": [136, 137], "cqadupstackmathematicaretriev": [136, 137], "cqadupstackphysicsretriev": [136, 137], "cqadupstackprogrammersretriev": [136, 137], "cqadupstackstatsretriev": [136, 137], "cqadupstacktexretriev": [136, 137], "cqadupstackunixretriev": [136, 137], "cqadupstackwebmastersretriev": [136, 137], "cqadupstackwordpressretriev": [136, 137], "crab": 142, "craft": 142, "cramp": 112, "creat": [10, 16, 59, 111, 121, 129, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "create_meta": [137, 138], "create_one_exampl": [0, 7, 14, 16], "create_retrieval_chain": 143, "create_stuff_documents_chain": 143, "creation": 133, "creativ": 142, "cross": [11, 60, 65, 70, 77, 108, 114, 140], "crossdecodermodel": [49, 50, 51, 52, 54, 73, 74, 80, 82], "crossencodermodel": [49, 73, 85, 86, 87], "crucial": [45, 112, 131, 132, 135, 136], "cuda": [24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105, 114], "cuda_visible_devic": 116, "cuisin": 142, "culinari": 142, "cumul": [127, 135], "cup": [32, 126], "current": [10, 17, 59, 60, 65, 70, 77, 127], "curri": 142, "curs": [121, 131], "custom": [13, 19, 21, 22, 142, 144], "cut": 142, "cut_off": [135, 140], "cutoff": [111, 127, 135, 136, 140], "cutoff_lay": [100, 101, 115], "d": [123, 126, 130, 131, 132, 133, 135, 140, 142], "da": 142, "dai": [112, 121, 140], "daili": [137, 138, 142], "danc": [111, 129], "data": [9, 10, 12, 15, 16, 18, 24, 27, 32, 35, 39, 42, 55, 58, 59, 61, 71, 78, 83, 99, 100, 101, 102, 108, 113, 114, 121, 129, 131, 132, 133, 135, 140], "data_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "data_col": [13, 19, 56, 62, 67, 72, 79, 84, 89], "data_se": 69, "data_url": 133, "databas": [105, 143, 144], "datacol": [13, 19, 56, 62, 67, 72, 79, 84, 89], "dataload": [99, 100], "dataloader_drop_last": 69, "dataloader_num_work": [10, 59, 69], "dataloader_persistent_work": 69, "dataloader_pin_memori": 69, "dataloader_prefetch_factor": 69, "dataset": [0, 1, 10, 12, 13, 16, 18, 19, 32, 35, 39, 42, 45, 49, 50, 51, 56, 57, 61, 62, 67, 72, 79, 84, 89, 92, 93, 94, 95, 97, 98, 99, 100, 105, 108, 111, 113, 121, 123, 127, 130, 131, 136, 137, 143, 144], "dataset_dir": [27, 32, 35, 39, 42], "dataset_nam": [27, 32, 35, 39, 42], "dataset_revis": 136, "datset": 10, "dave": 35, "db": 143, "dbpedia": [136, 137], "dcg": [127, 135], "dcg_p": [127, 135], "ddp_backend": 69, "ddp_broadcast_buff": 69, "ddp_bucket_cap_mb": 69, "ddp_find_unused_paramet": 69, "ddp_timeout": 69, "de": 124, "debug": 69, "debug_util": 69, "debugopt": 69, "decid": 105, "decis": 10, "decod": [49, 50, 53, 54, 55, 58, 60, 61, 73, 76, 77, 78, 81, 82, 83, 94, 99, 100, 101, 131], "decoder_onli": [53, 54, 55, 56, 58, 59, 60, 61, 62, 76, 77, 78, 79, 81, 82, 83, 84, 94, 95, 99, 100, 101], "decoderonlyembeddericldataargu": [49, 50, 51, 57, 58, 59, 61], "decoderonlyembeddericlmodelargu": [49, 50, 51, 57, 58, 61], "decoderonlyembeddericlrunn": [49, 50, 51, 57, 61], "decoderonlyembeddericlsamedatasettraindataset": [49, 50, 51, 57, 61], "decoderonlyembeddericltrain": [49, 50, 51, 57, 61, 62], "decoderonlyembeddermodelargu": [49, 50, 51, 52, 53, 78], "decoderonlyembedderrunn": [49, 73, 74, 75, 78], "decoderonlyembeddertrain": [49, 73, 74, 75, 78, 79], "decoderonlyrerankerrunn": [49, 50, 51, 52, 55, 73, 74, 80, 83], "decoderonlyrerankertrain": [49, 50, 51, 52, 55, 56, 73, 74, 80, 83, 84], "decor": 142, "decreas": 123, "dedic": 112, "deep": [111, 129], "deepspe": 69, "def": [111, 123, 126, 127, 133, 135, 138, 140], "default": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 130, 136, 144], "default_batch_s": [10, 59], "default_pooling_method": [91, 94, 95, 96, 97, 98], "defaultdict": 122, "defin": [112, 113, 122, 124, 126, 131], "definit": [112, 126, 143], "degrad": [21, 22, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 115, 140], "delici": 142, "demand": 121, "demo": 106, "demonstr": [108, 121, 124, 133, 136], "denomin": [126, 127], "denot": 126, "dens": [70, 98, 105, 108, 121, 122, 123, 143], "dense_scor": 70, "dense_vec": [98, 113, 122, 124], "dense_weight": 70, "depend": [107, 113, 124, 129, 135, 138, 140], "deploi": [114, 115, 130, 140], "deprec": 101, "desc": [135, 140], "descend": 111, "descript": [112, 113, 114, 115, 116, 122, 140, 144], "design": [27, 45, 108, 136, 142], "destin": 133, "detach": 123, "detail": [16, 22, 109, 113, 121, 122, 123, 138, 140, 143], "determin": [137, 138], "dev": [24, 27, 32, 39, 42, 135, 137, 140], "develop": [107, 119, 121, 122], "devic": [11, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 92, 94, 95, 97, 98, 99, 100, 101, 102, 114, 116, 130], "diagnosi": 112, "diagram": 131, "dict": [11, 13, 16, 17, 19, 21, 22, 54, 56, 60, 62, 65, 67, 69, 70, 71, 72, 77, 79, 82, 84, 87, 89, 95, 98], "dictionari": [13, 16, 19, 21, 22, 54, 70, 71, 87, 98, 122, 131], "differ": [32, 45, 98, 105, 108, 113, 114, 121, 122, 123, 126, 127, 131, 133, 135, 136, 137, 138, 140, 142, 143, 145], "difficulti": 110, "digit": 121, "dim": [71, 123, 126, 129, 130, 135, 140, 144], "dimens": [98, 123, 131, 132, 133, 135, 144], "dimension": [108, 121, 131, 132, 144], "dine": 142, "dinner": 142, "dir": 71, "dir_to_fil": 144, "direct": 132, "directli": [108, 114, 122, 126, 130, 131, 136, 137, 138, 140], "directori": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 129, 135, 143, 144], "disable_tqdm": 69, "disc": 112, "discount": [127, 135], "discrib": 131, "discript": [111, 129], "diseas": 112, "dish": 142, "disign": 140, "dispatch_batch": 69, "displai": 144, "dissimilar": 126, "dist": [126, 129], "distanc": [108, 113, 124, 130, 131, 132, 135, 137], "distil": [10, 11, 17, 59, 60, 65, 70, 77, 82], "distill_loss": [0, 7, 8, 11], "distinct": [111, 129, 142], "distinguish": [113, 122, 143], "distribut": [11, 105, 116, 122, 132, 133], "distroi": 131, "divers": [35, 39, 111, 122, 129, 143], "divic": 130, "divid": [126, 132], "do": [70, 105, 107, 121, 129, 130, 131, 135, 136, 137, 140], "do_ev": 69, "do_predict": 69, "do_train": 69, "doc": [24, 39, 127, 129, 142, 143], "doc_chain": 143, "doc_encod": 16, "docid": 39, "document": [10, 16, 17, 32, 39, 59, 82, 105, 108, 112, 113, 114, 119, 121, 122, 124, 127, 135, 137, 138, 142, 144], "document_load": 143, "doe": [16, 105, 111, 126, 130, 131, 133, 143, 144], "dog": 121, "domain": [24, 35, 111, 129], "don": [122, 124, 137], "done": [132, 137, 138], "dot": 111, "dot_prod": 126, "downei": [111, 129], "download": [10, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 133, 135, 140, 143, 144], "downstream": [113, 124], "downtown": 142, "dpr": 105, "driven": [111, 129], "drop_threshold": [15, 58], "dropout": [123, 124], "dtype": [122, 126, 129, 133, 135, 140, 142], "due": [105, 112, 113, 124, 131], "dure": [11, 60, 65, 70, 77, 105, 107, 116, 126, 133, 135, 140], "duretriev": 138, "dynam": 24, "e": [105, 107, 108, 130], "e_p": [113, 124], "e_q": [113, 124], "each": [21, 22, 32, 35, 94, 95, 97, 98, 99, 100, 101, 102, 111, 112, 113, 122, 123, 124, 127, 129, 130, 131, 132, 133, 135, 137, 138, 140, 142], "earli": 121, "earthi": 142, "easi": [45, 114, 115, 136, 140], "easier": 24, "easili": 136, "eat": 112, "ecomretriev": 138, "edg": 131, "edit": 107, "edmund": 35, "ef_construct": [131, 133], "ef_search": [131, 133], "efconstruct": [131, 133], "effect": [111, 112, 113, 127, 132, 135], "effici": [108, 112, 115, 121, 131, 138, 140], "efsearch": [131, 133], "eight": [45, 136], "either": [113, 124, 126], "element": [13, 19, 111, 131, 132, 133], "elementwise_affin": [123, 124], "elif": 123, "els": [123, 127, 137], "emb": [121, 129, 142, 143, 144], "embed": [11, 12, 17, 21, 27, 45, 60, 65, 66, 70, 77, 78, 92, 94, 95, 97, 98, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 119, 123, 124, 126, 127, 130, 131, 136, 137, 138, 142, 143, 144, 145], "embed_model": 144, "embedcol": [10, 59], "embedd": [0, 7, 10, 11, 12, 13, 15, 21, 24, 27, 32, 35, 39, 42, 45, 49, 53, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 77, 78, 79, 91, 92, 94, 95, 97, 98, 106, 119], "embedder_batch_s": 105, "embedder_name_or_path": [24, 27, 32, 35, 39, 42, 45], "embedder_passage_max_length": 39, "embeddermodelclass": 92, "embedderoutput": [0, 7, 8, 13, 70], "embeddertrainercallbackfordatarefresh": [0, 7, 8], "embedding_1": 126, "embedding_2": 126, "embedding_3": 126, "embedding_model": 143, "embeddings_1": [110, 112, 124], "embeddings_2": [110, 112, 124], "embeed": 132, "eminem": [111, 129], "emotionclassif": 137, "en": [24, 27, 35, 42, 45, 95, 110, 111, 116, 117, 121, 122, 123, 126, 129, 135, 136, 137, 140, 142, 143, 144], "enabl": [17, 60, 65, 70, 77, 108, 112, 113, 121, 132], "enable_input_require_grad": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "encod": [0, 7, 8, 9, 11, 14, 16, 17, 20, 21, 22, 49, 50, 51, 52, 54, 56, 57, 60, 62, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 102, 105, 108, 110, 111, 113, 114, 116, 121, 122, 124, 126, 127, 129, 135, 138, 140, 142], "encode_corpu": [0, 20, 21, 91, 94, 95, 96, 97, 98, 112], "encode_kei": 122, "encode_kwarg": 143, "encode_multi_process": [0, 20, 21, 22], "encode_psg": 16, "encode_qri": 16, "encode_queri": [0, 20, 21, 91, 94, 95, 96, 97, 98, 112, 122, 129, 135, 140, 142], "encode_queries_single_devic": [91, 95, 96], "encode_single_devic": [0, 20, 21, 91, 94, 95, 96, 97, 98], "encoder_onli": [65, 66, 67, 69, 70, 71, 72, 87, 88, 89, 97, 98, 102], "encoderonlyembedderm3model": [49, 50, 63, 68], "encoderonlyembedderm3modelargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderm3modelforinfer": [49, 50, 63, 68], "encoderonlyembedderm3runn": [49, 50, 63, 68, 71], "encoderonlyembedderm3train": [49, 50, 63, 68, 71, 72], "encoderonlyembedderm3trainingargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderrunn": [49, 50, 63, 64, 66], "encoderonlyembeddertrain": [49, 50, 63, 64, 66, 67], "encoderonlyrerankerrunn": [49, 73, 85, 86, 88], "encoderonlyrerankertrain": [49, 73, 85, 86, 88, 89], "encourag": 137, "end": [10, 123], "endem": 140, "eng": [45, 136, 137], "engin": [137, 144], "england": 142, "english": [112, 114, 115, 116, 122, 136, 137, 138, 140], "enhanc": [95, 112, 113, 116, 122], "enjoi": 126, "enough": [105, 111, 121, 131, 137, 142], "ensembl": 70, "ensemble_scor": [49, 50, 63, 68, 70], "entir": [113, 121, 124], "entiti": 35, "entri": 131, "entropi": [60, 65, 70, 77], "enumer": [111, 127, 129, 135, 140], "env": [129, 130], "environ": [111, 116, 121, 122, 123, 124, 129, 130, 135, 136, 137, 140, 142, 143, 144], "ep": [123, 124], "epoch": 10, "equal": [105, 137, 138], "era": 108, "error": 105, "etc": [108, 127, 142], "euc_dist1_2": 126, "euc_dist1_3": 126, "euclidean": [108, 131, 133], "eval": [123, 124, 127], "eval_accumulation_step": 69, "eval_air_bench": 24, "eval_beir": 27, "eval_dataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "eval_delai": 69, "eval_do_concat_batch": 69, "eval_metr": [27, 32, 35, 39, 42], "eval_miracl": 32, "eval_mkqa": 35, "eval_mldr": 39, "eval_msmarco": 42, "eval_mteb": 45, "eval_nam": [27, 32, 35, 39, 42, 45], "eval_on_start": 69, "eval_output_method": [27, 32, 35, 39, 42], "eval_output_path": [27, 32, 35, 39, 42, 45], "eval_split": 137, "eval_step": 69, "eval_strategi": 69, "eval_use_gather_object": 69, "evaldenseretriev": [0, 1], "evalpredict": [13, 19, 56, 62, 67, 72, 79, 84, 89], "evalrerank": [0, 1], "evalretriev": [0, 1], "evalu": [0, 24, 27, 32, 35, 39, 42, 45, 105, 106, 109, 113, 119, 133, 136], "evaluation_strategi": 69, "evaluation_tim": 136, "even": [108, 126, 131, 133, 135, 137], "event": 10, "everi": [11, 17, 70, 82], "every_sav": 69, "everyth": 143, "everywher": 142, "exacerb": 112, "exactli": 123, "exampl": [16, 24, 27, 32, 35, 39, 42, 45, 95, 108, 109, 112, 113, 114, 116, 119, 121, 123, 127, 132, 137, 140, 144], "example_id": 35, "example_passage_max_len": 58, "example_query_max_len": 58, "examples_for_task": [95, 112], "examples_instruction_format": [95, 112], "excel": 121, "except": 142, "excit": [119, 142], "execut": [12, 18], "exhaust": 135, "exist": [113, 124, 137], "expand": [119, 126], "expect": [112, 123, 142], "experi": [109, 133, 135, 137, 142], "expert": [111, 129], "explan": 143, "explor": [119, 131], "export": [105, 110], "express": 126, "exquisit": 142, "extend": [21, 22, 113], "extens": 131, "extern": 108, "extra": [121, 142], "extrem": [121, 130, 133], "extremli": 108, "f": [111, 121, 122, 123, 124, 126, 127, 129, 131, 132, 133, 135, 138, 140], "f1": [137, 138], "f_": [113, 124], "face": [105, 110, 118], "facilit": [112, 115, 140], "factor": [112, 131, 132], "factori": [9, 15, 53, 58, 69, 76, 81], "fail": 121, "fair": 142, "fairli": 137, "faiss": [105, 133, 135, 140, 142, 143, 144], "faiss_index": 144, "faissvectorstor": 144, "fake": 130, "fall": [126, 131], "fals": [9, 11, 13, 15, 19, 22, 24, 27, 32, 35, 39, 53, 58, 60, 65, 69, 70, 71, 76, 77, 81, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 122, 123, 124, 127, 135], "famili": 131, "familiar": [108, 119, 140], "famou": [108, 111, 129, 142], "faq": 119, "fast": [114, 115, 121, 129, 140, 142], "faster": [24, 116, 137], "favor": 142, "favorit": 126, "featur": [10, 11, 16, 17, 54, 60, 65, 70, 77, 82, 87, 108, 121, 142], "feed": [11, 60, 65, 70, 77, 110], "feel": [122, 123, 135, 140], "fei": [111, 129], "femal": [111, 112, 129], "fetch": [122, 124], "fever": [136, 137], "few": [95, 112, 116, 126, 129, 131], "fidel": 131, "field": 121, "fight": [111, 129], "figur": [108, 111, 129, 142], "fil": 142, "file": [121, 122, 124, 131, 132, 133, 136, 143, 144], "file_path": [10, 16], "fill": [121, 142, 143, 144], "film": [111, 129], "fin": 124, "final": [10, 111, 113, 114, 124, 142, 144], "find": [105, 119, 121, 135, 137, 138], "fine": [12, 18, 106, 109, 113, 122, 124, 137], "finest": 142, "finetun": [0, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 107, 119], "finish": 137, "fiqa": 27, "fiqa2018": [136, 137], "fire": 142, "first": [13, 19, 45, 98, 108, 110, 111, 114, 116, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 135, 136, 138, 140, 142, 143, 144], "firstli": [113, 124], "fit": [131, 133], "fix": 132, "fix_encod": 69, "fix_position_embed": 69, "flag_dres_model": 138, "flagautomodel": [91, 110], "flagautorerank": 91, "flagdresmodel": 138, "flagembed": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 107, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 126, 129, 135, 138, 140, 142], "flagiclmodel": 112, "flagllmrerank": 115, "flagmodel": [111, 116, 121, 122, 123, 126, 129, 135, 140, 142], "flagopen": 107, "flagrerank": [114, 115, 140], "flat": [129, 130, 131, 132, 135, 140], "flavor": 142, "flexibl": 112, "float": [9, 10, 11, 15, 21, 22, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 92, 93, 94, 97, 98, 99, 100, 101, 102, 123, 132], "float32": [122, 126, 129, 130, 133, 135, 140], "focu": 142, "focus": 32, "folder": [119, 145], "follow": [35, 95, 108, 111, 113, 121, 122, 123, 124, 126, 127, 129, 133, 135, 137, 138, 140, 143, 144], "food": 142, "footprint": 133, "forc": 133, "form": [127, 131, 135], "format": [10, 21, 22, 59, 95, 112, 142], "forward": [0, 7, 8, 11, 14, 17, 49, 50, 63, 68, 70, 73, 74, 80, 82], "found": [10, 16, 32, 122, 142], "foundat": [111, 129], "fp16": [69, 105], "fp16_backend": 69, "fp16_full_ev": 69, "fp16_opt_level": 69, "frac": [113, 124, 126, 127, 135], "framework": [45, 136, 143, 144], "free": [121, 122, 123, 135, 140], "freedom": [115, 140], "freeli": 121, "freeman": [111, 129], "french": 142, "frequenc": [121, 130], "frequent": 119, "freshest": 142, "fri": 142, "from": [10, 11, 16, 21, 22, 35, 39, 54, 70, 71, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144], "from_default": 144, "from_docu": [143, 144], "from_exist": 137, "from_finetun": [91, 92, 93, 110], "from_numpi": 126, "from_peft": [53, 58, 76, 81], "from_pretrain": [123, 124], "from_raw_model": 81, "from_templ": 143, "front": [121, 122], "fsdp": 69, "fsdp_config": 69, "fsdp_min_num_param": 69, "fsdp_transformer_layer_cls_to_wrap": 69, "fsdpoption": 69, "full": [105, 122, 123, 132, 135, 136, 137], "full_determin": 69, "fulli": 112, "function": [11, 70, 97, 105, 115, 119, 122, 123, 130, 131, 135, 140, 143, 144], "fundament": 131, "further": 105, "futur": 129, "g": [105, 108, 130], "gain": [127, 135], "gather": 11, "gb": [112, 113, 114, 115, 116, 122], "ge": 124, "geluactiv": [123, 124], "gemma": [115, 140], "gemma2": [115, 140], "gener": [24, 32, 39, 45, 105, 111, 112, 113, 117, 121, 123, 124, 131, 133, 136, 137], "genu": 140, "geoffrei": [111, 129], "geometr": 126, "get": [10, 11, 22, 60, 65, 70, 71, 77, 92, 97, 98, 105, 106, 109, 110, 111, 113, 114, 118, 119, 123, 124, 126, 127, 129, 131, 135, 137, 140], "get_detailed_exampl": [91, 95, 96], "get_detailed_input": [0, 20, 22], "get_detailed_instruct": [0, 20, 21, 22], "get_local_scor": [0, 7, 8, 11], "get_model": [49, 50, 63, 68, 71, 137], "get_prompt": 144, "get_target_devic": [0, 20, 21, 22], "get_task": [136, 138], "get_templ": 144, "get_text_embed": 144, "giant": 140, "git": 107, "github": [105, 107, 118, 119, 122, 137, 143, 144, 145], "give": [113, 124, 133, 142, 143, 144], "given": [10, 32, 95, 98, 112, 122, 127, 131, 135, 138, 143, 144], "global": [111, 129, 131, 144], "go": [123, 126, 131, 137, 138, 140, 142, 144], "goal": [137, 138], "good": [133, 135, 142], "googl": 35, "got": 111, "goto": 138, "govern": 112, "gpt": [39, 111, 121, 129, 142, 143, 144], "gpu": [21, 22, 99, 100, 101, 105, 107, 116, 121, 123, 131, 132, 133, 135, 137, 138], "gpucloneropt": 130, "gpumultiplecloneropt": [129, 130], "gpuresourc": 130, "gpuresourcesvector": 130, "grade": [127, 135], "gradient": [17, 60, 65, 70, 77], "gradient_accumulation_step": 69, "gradient_checkpoint": 69, "gradient_checkpointing_en": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "gradient_checkpointing_kwarg": 69, "grain": [113, 124], "gram": [112, 121], "grammi": [111, 129], "granular": [122, 143, 144], "granularityi": 122, "graph": 131, "great": [108, 130, 131, 133, 142, 144], "greater": 131, "greater_is_bett": 69, "ground": [111, 133, 135], "ground_truth": [111, 127, 135, 140], "group": [10, 11, 116, 118, 121, 131], "group_by_length": 69, "group_siz": 11, "guarante": [131, 133], "guidanc": 119, "guidelin": 112, "h5py": 133, "h_p": [113, 124], "h_q": [113, 124], "ha": [35, 108, 112, 121, 122, 123, 124, 126, 131, 133], "had": 111, "half": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102], "half_precision_backend": 69, "hallucin": 144, "ham": 131, "hand": [109, 118, 119, 145], "handl": [112, 123], "happen": 143, "happi": [114, 121], "hard": 143, "hardwar": [99, 100, 101, 112], "hash": 131, "hashtabel": 131, "have": [24, 105, 108, 111, 113, 118, 121, 123, 126, 127, 129, 131, 135, 136, 137, 140, 143, 144], "hawaii": 126, "hdf5": 133, "he": 111, "head_multi": 81, "head_typ": 81, "healthcar": 112, "hear": 35, "heavi": [112, 113, 124], "hello": [116, 144], "help": [24, 109, 112, 114, 142, 144], "helper": 70, "her": [111, 126, 129], "here": [111, 119, 123, 124, 129, 132, 133, 138, 143, 144], "herniat": 112, "heterogen": [24, 27], "hf": [10, 16, 71, 92, 93, 94, 95, 97, 98, 105, 110, 123, 137, 138], "hf_endpoint": [105, 110], "hf_subset": 136, "hi": [32, 39, 111, 126, 129], "hidden": [60, 65, 70, 77, 92, 97, 98, 113, 123, 124], "hidden_s": 98, "hidden_st": 70, "hierarch": 131, "high": [108, 114, 130, 135, 144], "higher": [111, 121, 131], "highest": 112, "highli": [113, 138, 145], "hinton": [111, 129], "hit": 127, "hnsw": 131, "hold": [45, 118], "holidai": 126, "hollywood": [111, 129], "hopefulli": 140, "hot": 121, "hotpot": 142, "hotpotqa": [136, 137], "hous": 142, "how": [13, 19, 45, 105, 108, 111, 112, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 140, 142, 143, 144], "howev": 121, "http": [105, 107, 110, 133, 143], "hub": [10, 21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 137, 138], "hub_always_push": 69, "hub_model_id": 69, "hub_private_repo": 69, "hub_strategi": 69, "hub_token": 69, "hubstrategi": 69, "hug": [105, 110, 118], "huge": [121, 143], "huggingfac": [21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 122, 135, 143, 144], "huggingfaceembed": [143, 144], "human": [24, 121, 137], "i": [11, 13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 92, 93, 105, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "i_truth": 133, "ic": 142, "icl": [49, 50, 51, 58, 59, 60, 61, 62, 95, 117, 122], "icl_suffix_str": 58, "iclllmembedd": [91, 96], "icon": [111, 129], "id": [70, 98, 122, 127, 129, 140], "idcg": [127, 135], "idcg_p": [127, 135], "idea": [111, 118, 137], "ideal": [127, 135], "ident": [130, 140], "idf": 121, "idx": [135, 140], "iflytek": 138, "ignore_data_skip": 69, "ignore_identical_id": 27, "imag": [108, 121], "imagenet": [111, 129], "imdbclassif": 137, "implement": [21, 22, 60, 65, 70, 77, 97, 123, 138], "import": [110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "imposs": 24, "improp": 112, "improv": [45, 113, 121, 124, 136], "in_featur": [123, 124], "includ": [112, 119, 121, 142], "include_inputs_for_metr": 69, "include_num_input_tokens_seen": 69, "include_tokens_per_second": 69, "incom": 131, "increas": [112, 131], "indeci": 111, "independ": [21, 22], "index": [10, 59, 111, 126], "index_cpu_to_all_gpu": [129, 130], "index_cpu_to_gpu": 130, "index_cpu_to_gpu_multipl": 130, "index_factori": [129, 130, 135, 140], "index_gpu": 130, "indexflat": 132, "indexflatip": [130, 131, 142], "indexflatl2": [131, 133, 144], "indexhnswflat": [131, 133], "indexivfflat": [131, 133], "indexivfpq": 132, "indexivfscalarquant": 132, "indexlsh": 133, "indexpq": [132, 133], "indexscalarquant": [132, 133], "indic": [111, 126, 127, 129, 132, 143], "industri": 130, "ineffici": 121, "inevit": 116, "infect": 112, "infer": [0, 21, 22, 70, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 106, 107, 109, 114, 115, 116, 119, 121, 122, 135, 140], "inflammatori": 112, "inform": [11, 24, 27, 32, 42, 109, 111, 113, 119, 121, 127, 133, 135, 142, 143, 144], "infti": 126, "ingredi": 142, "init": 144, "initi": [108, 116, 122, 130, 136, 138, 143, 144], "inner": [60, 65, 70, 77, 110, 111, 113, 124, 131, 135], "innov": [111, 129, 142], "inplac": [123, 124], "input": [10, 11, 13, 16, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 108, 113, 114, 121, 122, 123, 124, 129, 137, 138, 140, 143], "input_id": [70, 123], "input_queu": [21, 22], "input_was_str": 123, "inspect": 10, "instal": [106, 111, 121, 122, 127, 129, 131, 132, 133, 135, 140, 142, 143, 144], "instanc": [12, 18, 55, 61, 66, 71, 78, 83, 88, 127, 135, 136], "instead": [101, 105, 110, 114, 116, 123, 132, 143], "instruct": [10, 21, 22, 59, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 112, 116, 121, 122, 138], "instruction_format": [21, 22, 95], "int": [9, 10, 11, 15, 16, 17, 21, 22, 53, 54, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 122, 127, 135, 138, 140], "int32vector": 130, "integ": [21, 22, 133], "integr": [108, 113, 124, 144], "intellig": [119, 122], "interact": [113, 124], "interest": [119, 126, 127], "interfac": 112, "interg": 132, "intermedi": [123, 124], "intermediate_act_fn": [123, 124], "intern": [21, 22], "intersect": [126, 133], "intersect1d": [127, 133, 135, 140], "intervalstrategi": 69, "intervent": 24, "introduc": [45, 122, 126, 129, 132, 136], "introduct": [119, 145], "intuit": 121, "invalid": 11, "inventor": 111, "invert": [131, 132], "invok": 143, "involv": [127, 135], "ip": 132, "ir": 27, "iron": [111, 129], "irrelev": [137, 138], "is_train": 129, "isin": [127, 135, 140], "isinst": 123, "isol": 112, "issu": [105, 112, 116, 122, 126], "italian": 142, "item": [124, 126, 127], "iter": [21, 94, 95, 97, 98, 99, 100, 101, 102, 111], "iterabledataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "its": [111, 113, 116, 122, 124, 129, 130, 132, 135, 136, 137, 138, 142, 143], "itself": 130, "ivf": 131, "ivfflatl2": 133, "j": [111, 113, 124, 126, 127, 135, 140], "ja": 35, "jaccard_similar": 126, "jackson": [111, 129], "japanes": 142, "japenes": 142, "jdreview": 138, "jit_mode_ev": 69, "jjiga": 142, "joe": 142, "join": [105, 118, 119], "joint": [113, 124], "jointli": 108, "jr": [111, 129], "json": [45, 136], "just": [70, 105, 124, 126, 129, 130, 131, 136, 137], "k": [111, 114, 127, 129, 131, 132, 133, 135, 137, 138, 140], "k_valu": [27, 32, 35, 39, 42], "kd_loss_typ": [11, 60, 65, 69, 70, 77], "keepdim": 123, "kei": [108, 111, 121, 122, 123, 124, 142, 143, 144], "kernal": 130, "kernel": [129, 130], "key_embed": 122, "keyword": 119, "kg_co2_emiss": 136, "kind": [121, 142], "kitti": 121, "kl_div": [11, 60, 65, 69, 77], "knn": 129, "knock": 35, "know": [111, 119, 123, 142, 143, 144], "knowledg": [11, 17, 60, 65, 70, 77, 82, 111, 119, 129, 144], "knowledge_distil": [9, 15, 58], "known": [32, 45, 111, 129, 131, 136], "korean": 142, "kwarg": [10, 11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 138], "l2": [113, 124, 126, 132], "l6": 121, "label": [32, 111, 127, 135, 137, 138, 140], "label_nam": 69, "label_pad_token_id": 16, "label_smoothing_factor": 69, "lack": 112, "lambda": 111, "lambdalr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "land": 131, "langchain_commun": 143, "langchain_cor": 143, "langchain_huggingfac": 143, "langchain_openai": 143, "languag": [24, 32, 35, 39, 42, 45, 105, 112, 113, 114, 115, 116, 121, 122, 126, 136, 137, 140, 143], "larg": [27, 42, 45, 111, 114, 115, 116, 121, 122, 123, 124, 126, 130, 131, 133, 136, 140, 144], "larger": [113, 114, 121, 126, 131], "largest": [138, 140], "last": [60, 65, 69, 70, 77, 92, 97, 98, 112, 123, 130, 133, 137], "last_hidden_st": [60, 65, 70, 77, 97, 123], "last_token": [60, 77], "late": [113, 124], "later": 143, "latest": [45, 129, 130, 136], "latn": 136, "laxic": 98, "layer": [82, 100, 101, 113, 115, 123, 124, 131, 140], "layernorm": [123, 124], "layerwis": [49, 73, 74, 81, 82, 83, 84, 100, 115, 140], "layerwiseflagllmrerank": 115, "layerwisellmrerank": [91, 103], "lcqmc": 138, "lead": [105, 111, 126, 129, 130, 140], "leader": 112, "leaderboard": [45, 136], "learn": [109, 110, 111, 112, 122, 123, 126, 127, 129, 135, 143, 144], "learnabl": [113, 124], "learner": 112, "learning_r": 69, "legendari": [111, 129], "len": [111, 121, 124, 126, 127, 133, 135, 140, 144], "length": [21, 22, 69, 94, 95, 97, 98, 99, 100, 101, 102, 111, 121, 122, 124, 129, 135, 140], "length_column_nam": 69, "lengthi": 39, "less": [133, 140], "let": [111, 121, 123, 126, 129, 130, 136, 137, 140, 142, 143, 144], "level": [112, 114], "leverag": 112, "lex": [113, 124], "lexic": [98, 105, 113, 124], "lexical_weight": [98, 113, 122, 124], "lexical_weights_1": 98, "lexical_weights_2": 98, "li": [111, 129], "librari": 121, "licens": 121, "lift": 112, "light": 101, "lightweight": [101, 114, 115, 140], "lightweightflagllmrerank": 115, "lightweightllmrerank": [91, 103], "like": [39, 94, 99, 100, 101, 111, 112, 116, 121, 122, 129, 135, 136, 143, 144], "limit": [121, 131], "line": [111, 129, 135], "linear": [69, 71, 98, 113, 123, 124, 131], "lingual": [105, 122, 143, 144], "link": [113, 116, 137, 138], "linux": [130, 131, 132, 133], "list": [10, 11, 13, 16, 17, 19, 21, 22, 32, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 72, 76, 77, 79, 81, 82, 84, 89, 92, 94, 95, 97, 98, 99, 100, 101, 102, 111, 123, 127, 131, 135, 136, 137, 138, 140, 142], "liter": [21, 22, 98], "littl": 111, "live": [140, 142], "ll": [112, 121, 127, 129, 130, 133, 136], "llama": 144, "llama_index": 144, "llm": [16, 24, 94, 99, 100, 101, 108, 143, 144], "llmembedd": 122, "load": [10, 12, 16, 18, 21, 22, 55, 61, 66, 71, 78, 83, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 110, 116, 121, 122, 123, 129, 133, 136, 137, 138, 143, 144], "load_best_model_at_end": 69, "load_data": 144, "load_data_col": [0, 7, 8, 12, 14, 18], "load_dataset": [135, 140], "load_tokenizer_and_model": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train_dataset": [0, 7, 8, 12, 14, 18, 49, 50, 51, 57, 61], "loader": [0, 1, 143], "lobster": 142, "local": [11, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 129, 131, 135, 143], "local_rank": 69, "locat": 142, "log_2": [127, 135], "log_level": 69, "log_level_replica": 69, "log_on_each_nod": 69, "logging_dir": 69, "logging_first_step": 69, "logging_nan_inf_filt": 69, "logging_step": 69, "logging_strategi": 69, "logic": 112, "logist": [137, 138], "logit": [54, 87], "long": [24, 39, 105, 113, 122, 124, 133, 142], "longer": [105, 131, 133], "look": [39, 108, 111, 119, 121, 126, 133, 136, 137], "loop": [10, 129], "lora_alpha": [53, 58, 76, 81], "lora_dropout": [53, 58, 76, 81], "lora_rank": [53, 58, 76, 81], "lose": [126, 133], "loss": [11, 13, 17, 19, 60, 65, 70, 77, 133], "lot": [121, 144], "love": [110, 121, 123], "low": [115, 121, 132], "lower": 144, "lr_scheduler_kwarg": 69, "lr_scheduler_typ": 69, "lrlm": 122, "lsh": 131, "lstm": 121, "luxuri": 142, "m": [24, 27, 32, 35, 39, 42, 45, 113, 124, 126, 127, 130, 131, 132, 133, 135, 140, 142], "m3": [24, 27, 32, 35, 39, 42, 49, 50, 63, 69, 70, 71, 72, 98, 105, 115, 117, 140, 143, 144], "m3_kd_loss": [11, 70], "m3embedd": [91, 96], "machin": [42, 110, 112, 123, 135, 137, 143, 144], "made": 126, "magic": 143, "magnitud": 126, "mai": [112, 126, 131, 143], "main": [45, 127, 135, 136, 137, 138], "main_scor": 136, "mainli": 131, "maintain": [122, 129, 130, 131], "major": 105, "make": [24, 115, 116, 121, 123, 124, 127, 129, 130, 131, 135, 137, 142, 143], "man": [111, 129], "manag": 112, "manhattan": 142, "mani": [105, 119], "manual": 133, "map": [105, 108, 116, 121, 122, 132, 137, 138], "map_at_1": 136, "map_at_10": 136, "map_at_100": 136, "map_at_1000": 136, "map_at_20": 136, "map_at_3": 136, "map_at_5": 136, "marathon": 112, "marco": [42, 135, 140], "markdown": [27, 32, 35, 39, 42], "marvel": [111, 129], "masa": 142, "masayoshi": 142, "mask": [60, 65, 70, 77, 97], "massiv": [45, 136], "massiveintentclassif": 137, "massivescenarioclassif": 137, "match": [98, 105, 113, 121, 124, 143, 144], "materi": 118, "mathc": 124, "matrix": [60, 65, 70, 77, 113, 124], "max": [113, 124, 127, 132, 135, 140], "max_": [113, 124], "max_example_num_per_dataset": [9, 15, 58], "max_grad_norm": 69, "max_len": 9, "max_length": [10, 16, 21, 22, 59, 94, 95, 97, 98, 99, 100, 101, 102, 122, 123, 124], "max_passage_length": 98, "max_query_length": 98, "max_step": 69, "maxim": 131, "maximum": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 113, 124, 127, 135, 140, 143, 144], "mb": [116, 122], "mc4": 39, "mcl": 113, "md": [27, 32, 35, 39, 42, 137, 138], "mean": [108, 111, 123, 126, 127, 131, 135, 137, 138], "measur": [126, 127, 135, 137, 138], "meat": 142, "mechan": 126, "medicalretriev": 138, "medrxivclusteringp2p": 137, "medrxivclusterings2": 137, "meet": 112, "melanoleuca": 140, "member": 140, "memori": [121, 131, 132, 133], "menstrual": 112, "mention": 109, "menu": 142, "messag": [118, 142], "metadata": 143, "method": [0, 1, 7, 8, 14, 20, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86, 91, 96, 103, 105, 113, 121, 123, 124, 126, 131, 142, 143], "metric": [108, 111, 126, 129, 131, 132, 133, 135, 136, 137, 138, 140], "metric_for_best_model": 69, "metric_inner_product": [129, 135, 140], "metric_l2": [130, 132, 133], "michael": [111, 129], "microsoft": 42, "midtown": 142, "might": [111, 121, 129, 130], "million": 129, "mimic": 112, "min": [127, 135, 140], "mind": 143, "mindsmallrerank": 137, "mini": [137, 138, 142, 143, 144], "minicpm": [115, 140], "minilm": 121, "minimum": 127, "minut": 111, "miracl": 23, "miracl_eval_result": 32, "mirror": [105, 110], "mitr": 142, "mkqa": 23, "mkqa_eval_result": 35, "mldr": 23, "mldr_eval_result": 39, "mm": 126, "mmarcorerank": 138, "mmarcoretriev": 138, "modal": 144, "mode": 107, "model": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 123, 124, 126, 127, 129, 131, 135, 136, 137, 140, 142, 143, 144, 145], "model_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "model_cache_dir": 24, "model_card": [137, 138], "model_class": [92, 93], "model_init": [13, 19, 56, 62, 67, 72, 79, 84, 89], "model_nam": [136, 137, 138, 143, 144], "model_name_or_path": [9, 15, 21, 22, 53, 58, 69, 71, 76, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 138], "model_output": 123, "model_revis": [136, 137], "model_typ": [9, 76, 81], "modern": [27, 121], "modifi": [143, 144], "modul": [13, 19, 56, 62, 67, 72, 79, 84, 89], "modulelist": [123, 124], "modules_to_sav": [53, 58, 76, 81], "more": [105, 108, 111, 112, 113, 116, 118, 119, 121, 122, 123, 126, 131, 133, 140, 142, 143, 144], "morgan": [111, 129], "most": [111, 116, 121, 126, 136, 142, 143, 144], "mountain": 112, "mp_paramet": 69, "mrr": [111, 137, 138], "mrr_at_1": 136, "mrr_at_10": 136, "mrr_at_100": 136, "mrr_at_1000": 136, "mrr_at_20": 136, "mrr_at_3": 136, "mrr_at_5": 136, "mrr_init": 140, "mrr_rerank": 140, "msmarco": [23, 135, 136, 137, 140], "msmarco_eval_result": 42, "mteb": [23, 112, 116], "mteb_eval_result": 45, "mteb_main_en": 137, "mteb_vers": 136, "mtopdomainclassif": 137, "mtopintentclassif": 137, "much": [112, 133], "mul": [113, 124], "multi": [10, 21, 22, 59, 98, 105, 116, 122, 131, 143, 144], "multilingu": [32, 39, 115, 122, 124, 140], "multilingualsenti": 138, "multimod": 144, "multipl": [21, 22, 105, 112, 113, 124, 127, 144], "multiscal": 144, "multiv": 113, "muscl": 112, "music": [111, 129], "must": 70, "my": [114, 126], "mymodel": 138, "n": [9, 95, 112, 113, 121, 122, 123, 124, 126, 127, 129], "name": [21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 132], "namespac": [135, 140], "nanswer": 129, "narr": [111, 129], "narrow": 142, "nativ": [32, 140], "natur": [35, 42, 121, 126, 136, 143], "nauc_map_at_1000_diff1": 136, "nauc_map_at_1000_max": 136, "nauc_map_at_1000_std": 136, "nauc_map_at_100_diff1": 136, "nauc_map_at_100_max": 136, "nauc_map_at_100_std": 136, "nauc_map_at_10_diff1": 136, "nauc_map_at_10_max": 136, "nauc_map_at_10_std": 136, "nauc_map_at_1_diff1": 136, "nauc_map_at_1_max": 136, "nauc_map_at_1_std": 136, "nauc_map_at_20_diff1": 136, "nauc_map_at_20_max": 136, "nauc_map_at_20_std": 136, "nauc_map_at_3_diff1": 136, "nauc_map_at_3_max": 136, "nauc_map_at_3_std": 136, "nauc_map_at_5_diff1": 136, "nauc_map_at_5_max": 136, "nauc_map_at_5_std": 136, "nauc_mrr_at_1000_diff1": 136, "nauc_mrr_at_1000_max": 136, "nauc_mrr_at_1000_std": 136, "nauc_mrr_at_100_diff1": 136, "nauc_mrr_at_100_max": 136, "nauc_mrr_at_100_std": 136, "nauc_mrr_at_10_diff1": 136, "nauc_mrr_at_10_max": 136, "nauc_mrr_at_10_std": 136, "nauc_mrr_at_1_diff1": 136, "nauc_mrr_at_1_max": 136, "nauc_mrr_at_1_std": 136, "nauc_mrr_at_20_diff1": 136, "nauc_mrr_at_20_max": 136, "nauc_mrr_at_20_std": 136, "nauc_mrr_at_3_diff1": 136, "nauc_mrr_at_3_max": 136, "nauc_mrr_at_3_std": 136, "nauc_mrr_at_5_diff1": 136, "nauc_mrr_at_5_max": 136, "nauc_mrr_at_5_std": 136, "nauc_ndcg_at_1000_diff1": 136, "nauc_ndcg_at_1000_max": 136, "nauc_ndcg_at_1000_std": 136, "nauc_ndcg_at_100_diff1": 136, "nauc_ndcg_at_100_max": 136, "nauc_ndcg_at_100_std": 136, "nauc_ndcg_at_10_diff1": 136, "nauc_ndcg_at_10_max": 136, "nauc_ndcg_at_10_std": 136, "nauc_ndcg_at_1_diff1": 136, "nauc_ndcg_at_1_max": 136, "nauc_ndcg_at_1_std": 136, "nauc_ndcg_at_20_diff1": 136, "nauc_ndcg_at_20_max": 136, "nauc_ndcg_at_20_std": 136, "nauc_ndcg_at_3_diff1": 136, "nauc_ndcg_at_3_max": 136, "nauc_ndcg_at_3_std": 136, "nauc_ndcg_at_5_diff1": 136, "nauc_ndcg_at_5_max": 136, "nauc_ndcg_at_5_std": 136, "nauc_precision_at_1000_diff1": 136, "nauc_precision_at_1000_max": 136, "nauc_precision_at_1000_std": 136, "nauc_precision_at_100_diff1": 136, "nauc_precision_at_100_max": 136, "nauc_precision_at_100_std": 136, "nauc_precision_at_10_diff1": 136, "nauc_precision_at_10_max": 136, "nauc_precision_at_10_std": 136, "nauc_precision_at_1_diff1": 136, "nauc_precision_at_1_max": 136, "nauc_precision_at_1_std": 136, "nauc_precision_at_20_diff1": 136, "nauc_precision_at_20_max": 136, "nauc_precision_at_20_std": 136, "nauc_precision_at_3_diff1": 136, "nauc_precision_at_3_max": 136, "nauc_precision_at_3_std": 136, "nauc_precision_at_5_diff1": 136, "nauc_precision_at_5_max": 136, "nauc_precision_at_5_std": 136, "nauc_recall_at_1000_diff1": 136, "nauc_recall_at_1000_max": 136, "nauc_recall_at_1000_std": 136, "nauc_recall_at_100_diff1": 136, "nauc_recall_at_100_max": 136, "nauc_recall_at_100_std": 136, "nauc_recall_at_10_diff1": 136, "nauc_recall_at_10_max": 136, "nauc_recall_at_10_std": 136, "nauc_recall_at_1_diff1": 136, "nauc_recall_at_1_max": 136, "nauc_recall_at_1_std": 136, "nauc_recall_at_20_diff1": 136, "nauc_recall_at_20_max": 136, "nauc_recall_at_20_std": 136, "nauc_recall_at_3_diff1": 136, "nauc_recall_at_3_max": 136, "nauc_recall_at_3_std": 136, "nauc_recall_at_5_diff1": 136, "nauc_recall_at_5_max": 136, "nauc_recall_at_5_std": 136, "navig": 131, "nbit": [131, 132, 133], "ndarrai": [21, 22, 94, 95, 97, 98, 138], "ndcg": [137, 138], "ndcg_at_1": 136, "ndcg_at_10": [27, 32, 39, 42, 136], "ndcg_at_100": 136, "ndcg_at_1000": 136, "ndcg_at_20": 136, "ndcg_at_3": 136, "ndcg_at_5": 136, "ndcg_p": [127, 135], "ndcg_score": [127, 135, 140], "nearest": [130, 131, 132], "neat": 129, "need": [105, 107, 112, 121, 122, 123, 124, 129, 130, 131, 133, 137, 138, 142, 144], "neftune_noise_alpha": 69, "neg": [11, 60, 65, 70, 77, 127, 135], "neg_scor": [10, 16], "negative_passag": 39, "negatives_cross_devic": [11, 60, 65, 69, 70, 77], "neighbor": [130, 131, 132, 133], "network": [105, 111, 112, 121, 129], "neural": [111, 121, 129], "new": [24, 39, 112, 118, 119, 122, 137, 140, 142, 143], "new_data": 132, "new_id": 140, "new_scor": 140, "new_templ": 144, "new_text": 140, "next": [111, 113, 132, 136], "nfcorpu": [45, 136, 137], "ng": [111, 129], "ngpu": 130, "nine": 142, "nlist": [131, 132, 133], "nlp": [27, 45, 110, 123, 136], "nn": [123, 126], "no_cuda": 69, "no_in_batch_neg_flag": [11, 70], "node": 131, "node_pars": 144, "non": 144, "none": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 54, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 87, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 112, 122, 123], "norm": [113, 124, 126], "normal": [21, 22, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 113, 115, 123, 124, 126, 127, 132, 135], "normalize_embed": [21, 60, 65, 69, 70, 77, 92, 94, 95, 97, 98, 121, 143], "note": [10, 59, 105, 111, 123, 131, 136, 137, 138, 140, 144], "notebook": [129, 130, 132, 133, 135, 137], "notic": 24, "notimplementederror": [21, 60, 61, 65, 70, 77, 97], "noun": 126, "now": [24, 111, 118, 123, 126, 129, 130, 131, 132, 136, 137, 140, 142, 143, 144], "nowadai": 108, "np": [21, 94, 95, 97, 98, 121, 127, 129, 130, 131, 132, 133, 135, 138, 140, 142], "nprob": [131, 133], "nprobe": [131, 133], "nq": [136, 137], "nqueri": 94, "nrespons": 58, "nsw": 131, "ntotal": [129, 135, 140, 142], "nuber": 131, "null": 136, "num": 70, "num_process": [10, 59], "num_train_epoch": 69, "num_work": [99, 100], "number": [10, 11, 21, 59, 94, 95, 97, 98, 99, 100, 101, 102, 127, 129, 131, 132, 135, 137, 138, 140, 143, 144], "numer": [108, 126], "numpi": [21, 22, 92, 94, 95, 97, 121, 123, 127, 129, 130, 131, 132, 133, 135, 140, 142], "nvidia": [129, 130, 131, 132, 133], "o": [116, 121, 124, 142, 143, 144], "o1": 69, "object": [10, 21, 22, 112, 130, 132, 135, 144], "obtain": 123, "obviou": 133, "ocnli": 138, "offer": 142, "offici": 121, "omakas": 142, "on_epoch_end": [0, 7, 8, 10], "onc": [110, 111, 129], "one": [21, 22, 106, 110, 111, 115, 116, 121, 129, 132, 133, 136, 143, 144], "onli": [11, 13, 19, 21, 22, 32, 49, 50, 53, 54, 55, 56, 58, 60, 61, 65, 73, 76, 77, 78, 81, 82, 83, 84, 88, 89, 94, 97, 99, 100, 101, 102, 105, 111, 116, 121, 124, 126, 127, 129, 130, 131, 132, 137, 143, 144], "onlineshop": 138, "oom": 105, "open": [35, 105, 136, 143, 144], "openai": [111, 129, 142, 143, 144], "openai_api_kei": [121, 142, 143, 144], "opposit": 126, "optim": [13, 19, 56, 62, 67, 69, 72, 79, 84, 89, 133], "optim_arg": 69, "optim_target_modul": 69, "optimizernam": 69, "optimum": 131, "option": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 143, 144], "order": [111, 121, 127, 131, 135, 137], "org": 143, "origin": 132, "ortomar": 142, "osteoporosi": 112, "other": [111, 114, 121, 129, 133, 135, 137], "otherwis": [11, 13, 19, 21, 22, 70, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 122, 129, 138], "our": [24, 27, 32, 35, 39, 42, 45, 105, 109, 111, 113, 118, 119, 129, 133, 135, 136, 140, 142, 143, 144], "out": [16, 24, 60, 65, 70, 77, 111, 112, 113, 122, 135, 137, 140, 142], "out_featur": [123, 124], "outdoor": 142, "output": [11, 13, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 92, 94, 95, 97, 98, 113, 114, 115, 123, 124, 126, 140], "output_1": 124, "output_2": 124, "output_dir": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 69, 70, 77], "output_fold": [136, 137, 138], "output_path": [137, 138], "outstand": 112, "over": 122, "overcom": 121, "overlap": [143, 144], "overrid": [13, 19], "overview": 106, "overwrit": [24, 27, 32, 35, 39, 42], "overwrite_output_dir": 69, "own": [121, 129], "p": [113, 123, 124, 126, 127, 135, 140], "p_embed": 122, "p_rep": [11, 60, 65, 70, 77, 98], "packag": [107, 121, 123, 124, 136, 137, 138, 142, 143, 144], "pad": [10, 16, 59, 60, 65, 70, 77, 123], "pad_to_multiple_of": [9, 10, 15, 16, 58, 59], "padding_idx": [123, 124], "paddingstrategi": [10, 16, 59], "page": [136, 137, 138, 143], "pain": 112, "pair": [16, 17, 22, 35, 39, 54, 82, 87, 98, 99, 100, 101, 102, 108, 137, 138, 140], "panda": 140, "panthera": 140, "paper": [113, 122, 143, 144], "paragraph": 39, "parallel": [121, 123], "paramet": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 70, 71, 77, 78, 82, 83, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 112, 113, 114, 115, 116, 122, 131, 132, 133, 140, 144], "parser": 144, "part": [122, 133, 135, 136, 142, 143, 144], "particular": 143, "particularli": 144, "partit": [131, 132], "pass": [13, 16, 17, 19, 82, 130, 138], "passag": [11, 21, 22, 42, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 111, 112, 113, 115, 122, 124, 126, 129, 135, 140, 142], "passage_instruction_for_rerank": [9, 22, 99, 100, 101, 102], "passage_instruction_for_retriev": [15, 58], "passage_instruction_format": [9, 15, 22, 58, 99, 100, 101, 102], "passage_max_len": [9, 10, 15, 16, 58, 59], "passage_max_length": [21, 94, 95, 97, 98], "passiv": 69, "past": [137, 138], "past_index": 69, "pasta": 142, "path": [10, 16, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 129, 135, 137, 138, 143], "path_to_model": 138, "pattern": 121, "pawsx": 138, "pdf": 143, "peft": [99, 100, 101], "peft_model_path": [53, 58], "peft_path": [99, 100, 101], "pelvic": 112, "peopl": [111, 119, 121, 129, 144], "pepperoni": 142, "per": [21, 22, 112, 132, 142], "per_device_eval_batch_s": 69, "per_device_train_batch_s": [10, 59, 69], "per_gpu_eval_batch_s": 69, "per_gpu_train_batch_s": 69, "perfect": 131, "perfectli": [127, 135], "perform": [11, 17, 21, 22, 24, 27, 32, 35, 39, 42, 45, 70, 82, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 108, 111, 112, 113, 114, 115, 116, 122, 123, 126, 127, 133, 135, 136, 137, 140, 144], "person": [111, 121], "peter": 126, "phase": [132, 133], "pho": 142, "phrase": [111, 121], "physic": 112, "pick": [100, 101, 115], "pip": [111, 121, 122, 123, 124, 127, 129, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "pipelin": [45, 105, 106, 135, 136, 137, 140, 143, 144], "pitt": [111, 129], "pivot": 108, "pixel": 121, "pizza": 142, "place": 126, "plai": [108, 111, 121, 129, 135], "pleas": [105, 107, 113, 119, 137, 140, 142, 143], "pleasur": 114, "plenti": 121, "point": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 112, 131], "pool": [21, 22, 60, 65, 70, 77, 91, 92, 94, 95, 96, 97, 98, 123], "pooler": [123, 124], "pooling_method": [92, 97, 98, 123, 138], "pop": [111, 129], "popular": [116, 131, 133, 137, 144], "portion": 121, "pos_scor": [10, 16], "posit": [105, 113, 127, 135, 140], "position_embed": [123, 124], "positive_passag": 39, "possess": [115, 140], "possibl": [113, 121, 124, 127, 131, 135], "postur": 112, "potenti": 112, "pow": 126, "power": [111, 113, 121, 142, 143, 144], "pq": 132, "practic": [126, 127, 129], "pre": [54, 82, 87], "prec": 127, "precis": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 126, 137, 138, 140, 143], "precision_at_1": 136, "precision_at_10": 136, "precision_at_100": 136, "precision_at_1000": 136, "precision_at_20": 136, "precision_at_3": 136, "precision_at_5": 136, "pred": [111, 127, 135, 140], "pred_hard_encod": [127, 135, 140], "pred_hard_encodings_rerank": 140, "predict": [111, 127, 133, 135], "prediction_loss_onli": 69, "prefer": [24, 27, 32, 35, 39, 42, 45, 126, 131, 142], "prefix": 95, "pregnanc": 112, "premium": 142, "prepar": [16, 138], "preprocess": [131, 140], "preprocess_logits_for_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "present": [105, 142], "preserv": 144, "pretrainedmodel": [13, 19, 54, 56, 62, 67, 72, 79, 82, 84, 87, 89], "pretrainedtoken": [10, 12, 16, 18, 55, 59, 61, 66, 71, 78, 83, 88], "pretrainedtokenizerbas": [10, 13, 16, 19, 56, 59, 62, 67, 72, 79, 84, 89], "pretti": [111, 133, 144], "previous": 140, "price": 142, "primal": 126, "print": [110, 111, 112, 114, 115, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 137, 140, 142, 143, 144], "prior": 144, "problem": [131, 144], "proce": 122, "process": [10, 11, 12, 18, 21, 22, 42, 59, 98, 105, 113, 126, 131, 135, 136, 137, 143], "process_index": [10, 59], "process_target_func": 21, "produc": [111, 129, 130], "product": [60, 65, 70, 77, 110, 111, 113, 121, 124, 131, 135], "productquant": 132, "profession": 112, "professor": [111, 129], "profici": [115, 140], "program": 142, "project": [111, 113, 124, 129], "promot": 133, "prompt": [99, 100, 101, 142, 143, 144], "prompt_templ": 144, "prompttempl": 144, "promt": 144, "proper": 112, "propos": 113, "protein": 112, "provid": [21, 24, 27, 32, 35, 39, 42, 45, 70, 92, 93, 95, 97, 106, 109, 112, 119, 121, 123, 130, 136, 137, 138, 142, 143, 145], "proxim": 131, "psg": 16, "pt": [10, 16, 59, 113, 123, 124, 135, 140], "public": [111, 129], "publish": [121, 122], "purpos": 112, "purpu": 121, "pursu": [111, 129], "push_back": 130, "push_to_hub": 69, "push_to_hub_model_id": 69, "push_to_hub_organ": 69, "push_to_hub_token": 69, "put": 143, "pypdf": 143, "pypdfload": 143, "python": [24, 27, 32, 35, 39, 42, 45], "pytorch": [129, 130, 131, 132, 133], "q": [39, 113, 124, 127, 129, 135, 143, 144], "q545186": 35, "q_embed": [122, 135, 140, 142], "q_mask": 70, "q_rep": [11, 60, 65, 70, 77, 98], "qa": [24, 122], "qa_recall_at_20": 35, "qbqtc": 138, "qr": 118, "qry": 16, "qry_encod": 16, "qt": [113, 124], "qt_8bit": [132, 133], "qtype": [132, 133], "qualiti": [111, 114, 115, 116, 121, 127, 131, 135, 142], "quantiz": [129, 131], "queri": [10, 11, 16, 17, 21, 22, 35, 39, 59, 60, 65, 70, 77, 82, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 111, 112, 113, 115, 121, 122, 123, 124, 127, 130, 131, 132, 133, 135, 137, 138, 140, 142, 144], "queries_embed": 111, "query_embed": [111, 122, 129, 135, 140], "query_engin": 144, "query_id": 39, "query_instruction_for_rerank": [9, 22, 99, 100, 101, 102], "query_instruction_for_retriev": [15, 21, 58, 92, 94, 95, 97, 98, 111, 122, 126, 129, 135, 138, 140, 142], "query_instruction_format": [9, 15, 21, 22, 58, 92, 94, 95, 97, 98, 99, 100, 101, 102], "query_max_len": [9, 10, 15, 16, 58, 59], "query_max_length": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 114], "query_s": [135, 140], "query_str": 144, "question": [35, 39, 42, 105, 114, 118, 119, 122, 142, 143, 144], "queue": [21, 22], "quick": [106, 130, 132, 136], "quickli": [106, 109, 119, 143], "quit": 105, "quoraretriev": [136, 137], "r": [130, 133, 137], "rag": [106, 108, 109, 119], "rais": [10, 11, 16, 21, 22, 60, 61, 65, 70, 77, 92, 93, 97], "ram": 131, "ramen": 142, "randint": 126, "random": [10, 59, 130, 131, 132, 142], "randomli": 39, "rang": [45, 111, 115, 121, 126, 127, 130, 133, 135, 136, 140], "rank": [45, 108, 114, 116, 127, 135, 136, 137, 138], "rank_i": [127, 135], "rapper": [111, 129], "ratio": [101, 115, 127, 140], "raw": [10, 59], "raw_model": 124, "raw_peft": [53, 58, 76, 81], "ray_scop": 69, "re": [112, 114, 126, 127, 130, 133, 135, 142], "reach": 121, "read": [42, 144], "read_index": [129, 135], "reader": 144, "readi": [16, 143], "readm": [137, 138], "real": [42, 45, 105, 108, 115, 126, 133, 136], "reason": [116, 122, 131], "recal": 133, "recall_at_1": 136, "recall_at_10": 136, "recall_at_100": [27, 32, 42, 136], "recall_at_1000": 136, "recall_at_20": 136, "recall_at_3": 136, "recall_at_5": 136, "recalls_init": 140, "recalls_rerank": 140, "receiv": [111, 129], "reciproc": [111, 127, 135], "recommand": 115, "recommend": [21, 22, 105, 138, 142], "recommended_act": 142, "record": [111, 129], "recursivecharactertextsplitt": 143, "red": 142, "redditclust": 137, "redditclusteringp2p": 137, "reduc": 132, "reduct": [132, 133], "refer": [105, 112, 137, 138, 142, 143, 144], "refin": 108, "refresh": [10, 137, 138], "refresh_epoch": [0, 7, 8, 10], "regress": [137, 138], "rel": [127, 133], "rel_i": [127, 135], "relat": [105, 112, 121, 122, 126, 130, 142, 143, 145], "relationship": [108, 121, 144], "relax": [137, 142], "releas": [32, 114, 116, 117, 118, 121, 137], "relev": [32, 98, 99, 100, 101, 108, 111, 112, 113, 114, 122, 124, 126, 127, 129, 135, 137, 138, 140, 142], "reliabl": 142, "relu": [113, 124], "remov": [131, 137], "remove_unused_column": 69, "renown": [111, 129, 142], "repeat": [111, 137], "replac": 132, "replic": 130, "repo": [109, 118, 119, 133, 143, 144, 145], "report_to": 69, "repositori": [107, 109], "repres": [105, 108, 111, 121, 122, 126, 127, 129, 135, 140, 142], "represent": [11, 60, 65, 70, 77, 113, 124, 132, 143], "reproduc": [121, 137], "reproduct": 135, "request": 133, "requir": [112, 123, 124, 130, 131, 142, 143, 144], "rerank": [0, 7, 9, 16, 17, 18, 19, 22, 24, 27, 32, 35, 39, 42, 49, 54, 55, 56, 76, 81, 82, 83, 84, 87, 88, 89, 91, 93, 99, 100, 101, 102, 106, 113, 119, 121, 124, 137, 138], "rerank_top_k": [24, 27, 32, 35, 39, 42], "reranker_batch_s": 105, "reranker_max_length": [24, 27, 32, 35, 39, 42], "reranker_name_or_path": [24, 27, 32, 35, 39, 42], "rerankermodelargu": [49, 55, 73, 74, 75, 76, 80, 81, 83], "rerankermodelclass": 93, "rerankeroutput": [0, 7, 14, 19, 82], "rerpresent": 11, "res_id": [135, 140], "res_scor": [135, 140], "res_text": [135, 140], "research": [27, 35, 42, 119, 130, 137], "resid": 142, "resolut": 131, "resourc": [109, 112, 115, 119, 130, 137], "respect": [111, 113, 114, 124], "respoect": 137, "respons": [95, 112, 121, 142, 143, 144], "response_synthes": 144, "restart": 130, "restaur": 142, "restore_callback_states_from_checkpoint": 69, "result": [21, 22, 99, 100, 101, 102, 105, 108, 111, 113, 114, 121, 123, 124, 126, 127, 129, 131, 133, 135, 136, 137, 138, 140], "results_fold": [137, 138], "results_list": 21, "results_queu": [21, 22], "resume_from_checkpoint": 69, "retain": 124, "retreiv": 138, "retriev": [21, 24, 27, 32, 39, 42, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 114, 116, 119, 121, 122, 127, 129, 136, 137, 138, 143, 145], "retrieval_task": 136, "retrieval_use_exampl": 58, "return": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 66, 70, 71, 77, 78, 82, 83, 87, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 111, 122, 123, 124, 126, 127, 133, 135, 138, 140, 143, 144], "return_cobert_vec": 122, "return_colbert_vec": [70, 98, 113, 122, 124], "return_dens": [70, 98, 113, 122, 124], "return_dict": 123, "return_embed": 70, "return_output": [13, 19], "return_spars": [70, 98, 113, 122, 124], "return_sparse_embed": 70, "return_tensor": [10, 16, 59, 123], "revers": [111, 140], "revolution": [111, 129], "rgb": 121, "rice": 142, "rnage": 122, "rnn": 121, "robert": [111, 129], "roberta": [114, 121, 122, 124, 140], "role": [108, 111, 129, 142], "root": [24, 27, 32, 35, 39, 42, 45], "rough": 111, "row": 129, "ru": 35, "run": [0, 7, 8, 12, 14, 18, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 55, 57, 61, 73, 74, 75, 78, 80, 83, 94, 95, 97, 98, 111, 119, 121, 122, 123, 129, 130, 132, 133, 135, 136, 138, 143, 145], "run_nam": 69, "runner": [0, 1, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86], "s1": 126, "s2": 126, "s2p": 136, "s3": 126, "s_": [113, 124], "s_dens": 124, "s_lex_10_20": 124, "s_lex_10_21": 124, "s_mul_10_20": 124, "s_mul_10_21": 124, "s_rank_10_20": 124, "s_rank_10_21": 124, "sacrific": 131, "safe": [111, 129], "sai": 131, "sake": 129, "salad": 142, "sam": [111, 129], "same": [10, 108, 112, 114, 115, 116, 122, 123, 126, 131, 140], "same_dataset_within_batch": [15, 58, 61], "samedataset": [10, 59], "sampl": [10, 35, 39, 127, 135], "sandwich": 142, "saniti": [130, 131], "satisfactori": 133, "satisfi": [121, 130], "save": [0, 7, 8, 11, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 135, 143], "save_loc": 143, "save_merged_lora_model": [53, 58, 76, 81], "save_on_each_nod": 69, "save_only_model": 69, "save_pretrain": [0, 7, 14, 17], "save_safetensor": 69, "save_step": 69, "save_strategi": 69, "save_total_limit": 69, "scalar": 11, "scalarquant": [132, 133], "scale": [11, 42, 45, 60, 65, 70, 77, 116, 122, 131, 136, 144], "scan": 118, "scenario": [105, 113, 124], "schedulertyp": 69, "scidoc": [136, 137], "scidocsrr": [45, 137], "scifact": [136, 137], "scikit": 127, "scope": [131, 140], "score": [10, 11, 17, 22, 54, 59, 60, 65, 70, 77, 82, 87, 98, 99, 100, 101, 102, 108, 111, 113, 114, 115, 121, 122, 123, 124, 126, 127, 131, 135, 136, 137, 138, 140], "scratch": [109, 130], "script": [24, 27, 32, 35, 39, 42, 45], "se": 142, "seafood": 142, "seamlessli": 130, "search": [32, 105, 106, 111, 112, 121, 122, 127, 129, 131, 132, 133, 135, 140, 142], "search_result": [24, 27, 32, 35, 39, 42, 45], "search_top_k": [24, 27, 32, 35, 39, 42], "searcher": [0, 1], "seat": 142, "second": [98, 133, 135], "section": [123, 126, 137, 145], "secur": 112, "see": [112, 123, 124, 126, 129, 130, 133, 136, 140, 142, 143, 144], "seed": [10, 59, 69, 130, 131, 132], "seen": [111, 131, 132], "select": [70, 101, 108, 115, 116, 129, 130, 136, 140], "self": [11, 70, 99, 100, 101, 102, 123, 124, 138], "self_distill_start_step": [69, 70], "sell": [111, 129], "semant": [108, 111, 121, 137, 138], "sen1_vec": 121, "sen2_vec": 121, "senario": 115, "sensit": 131, "sentenc": [21, 22, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 110, 111, 113, 116, 122, 124, 126, 129, 135, 137, 138, 140, 142], "sentence1": [121, 126], "sentence2": [121, 126], "sentence_1": 126, "sentence_2": 126, "sentence_3": 126, "sentence_embed": 123, "sentence_pair": [22, 98, 99, 100, 101, 102], "sentence_pooling_method": [60, 65, 69, 70, 77], "sentence_transform": [121, 136, 137, 138], "sentences_1": [110, 113, 124], "sentences_2": [110, 113, 124], "sentencesplitt": 144, "sentencetransform": [21, 22, 121, 136, 137, 138], "sentens": 126, "sep": [116, 123], "sep_token": 9, "separ": 16, "sequenti": 131, "seri": [109, 111, 112, 114, 116, 117, 121, 126, 129], "serv": [137, 138, 142], "set": [10, 11, 24, 32, 35, 39, 59, 71, 95, 105, 112, 113, 115, 122, 124, 126, 127, 131, 133, 135, 137, 138, 140, 142, 144], "set1": 126, "set2": 126, "set_exampl": [91, 95, 96], "setup": [21, 22], "sever": [21, 22, 121, 126, 131], "sh": [24, 27, 32, 35, 39, 42, 45], "shanghai": 142, "shape": [111, 121, 123, 126, 129, 133, 135, 140, 142], "shard": 130, "share": [112, 122, 126], "she": 111, "shell": [24, 27, 32, 35, 39, 42, 45, 137, 138], "short": [105, 113, 122, 142], "shot": [95, 112], "should": [10, 21, 22, 59, 112, 126, 130, 136, 137, 138, 142], "show": [108, 111, 126, 127, 135, 136, 137, 143], "shrink": 131, "shrip": 142, "shuffl": [10, 16], "shuffle_ratio": [9, 15, 58], "sick": 137, "sift": 133, "sift1m": 133, "sigl": 116, "sigmoid": [99, 100, 101, 102, 115], "signal": 121, "signific": 123, "significantli": 112, "sim": [113, 124], "sim_scor": 111, "similar": [60, 65, 70, 77, 108, 110, 112, 113, 114, 116, 121, 122, 123, 124, 131, 132, 133, 137, 138, 140], "similarli": [121, 122], "simpl": [81, 105, 113, 114, 116, 129, 143], "simpledirectoryread": 144, "simpli": [32, 35, 39, 42, 131, 140], "simultan": [113, 122], "sinc": [126, 135, 143], "sing": 35, "singer": [111, 129], "singl": [16, 21, 94, 95, 97, 98, 99, 100, 101, 105, 116, 123], "size": [10, 11, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 105, 112, 113, 114, 115, 116, 122, 123, 126, 130, 131, 132, 137, 138, 143, 144], "skip": 130, "skip_memory_metr": 69, "sklearn": [127, 135, 140], "slight": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 115, 140], "slower": [131, 140], "small": [111, 116, 121, 122, 127, 131, 133, 140], "small_threshold": [15, 58], "smaller": [105, 122, 124, 131, 132], "so": [121, 126, 129, 131, 132, 137, 142], "soft": 142, "softwar": 112, "solv": 144, "some": [105, 110, 119, 121, 127, 129, 131, 135, 142], "sometim": 140, "somewhat": 133, "songwrit": [111, 129], "soon": [137, 138], "soondubu": 142, "sophist": [121, 142], "sort": [111, 140], "sorted_indic": 111, "sota": [112, 121], "sourc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 123, 136, 143, 144], "space": [108, 121, 129, 130, 131, 132, 135, 140, 144], "span": [113, 122], "sparc": [70, 98, 113, 124], "spars": [70, 71, 98, 105, 108, 121, 122], "sparse_scor": 70, "sparse_weight": 70, "speaker": 32, "spearman": [137, 138], "speci": 140, "special": [113, 123, 124], "specif": [39, 99, 100, 101, 111, 122, 129, 143, 144], "specifi": [10, 21, 22, 60, 65, 70, 77, 98, 99, 100, 101, 102, 112, 144], "speed": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 115, 122, 124, 129, 131, 132, 133, 140], "spend": 126, "spici": 142, "spinach": 142, "spinal": 112, "spirit": 142, "splade": 105, "split": [11, 24, 27, 32, 35, 39, 42, 60, 65, 70, 77, 126, 135, 138, 140, 143], "split_batch": 69, "split_docu": 143, "splitter": 143, "spread": [111, 129], "sprintduplicatequest": 137, "sqrt": 126, "st": [137, 138], "stackexchangeclust": 137, "stackexchangeclusteringp2p": 137, "stackoverflowdupquest": 137, "stage": [121, 140], "stand": [117, 122, 143, 144], "standard": [45, 136, 142], "standardgpuresourc": 130, "standout": 133, "stanford": [111, 129], "start": [21, 22, 70, 82, 105, 119, 127, 137, 138], "start_lay": [81, 82], "start_multi_process_pool": [0, 20, 21, 22], "state": [10, 60, 65, 70, 77, 92, 97, 98, 112, 113, 114, 123, 124], "static": [10, 11, 21, 22, 71, 95], "statist": 121, "steak": 142, "steakhous": 142, "stem": 112, "step": [69, 70, 121, 124, 126, 127, 130, 132, 137, 140, 142, 143], "stew": 142, "still": [111, 116, 133], "stop": [21, 22, 106], "stop_multi_process_pool": [0, 20, 21, 22], "storag": 144, "storage_context": 144, "storagecontext": 144, "store": [71, 129, 130, 131, 132, 135, 136, 137, 138, 140, 144], "str": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 123, 138], "straightforward": 143, "strain": 112, "stream": 144, "stress": 112, "string": [21, 22], "strong": [115, 140], "structur": [35, 109, 123, 131, 138, 144], "sts12": 137, "sts13": 137, "sts14": 137, "sts15": 137, "sts16": 137, "sts17": 137, "sts22": 137, "stsb": 138, "stsbenchmark": 137, "student": 11, "student_scor": 11, "sub": [11, 60, 65, 70, 77, 132], "sub_batch_s": [10, 11, 59, 60, 65, 69, 70, 77], "subclass": [13, 19], "subquant": 132, "subsequ": 121, "subset": 136, "subtract": 126, "successfulli": 136, "suffer": [121, 131], "suffix": 95, "suggess": 115, "suggest": [133, 140, 142], "suitabl": [115, 140], "sum": [123, 126, 135, 140], "sum_": [113, 124, 126, 127, 135], "summar": 137, "summari": 137, "summat": [113, 124], "summev": 137, "summit": 112, "sunni": [121, 140], "super": [111, 129], "support": [11, 61, 99, 100, 101, 105, 107, 113, 121, 122, 123, 124, 130, 131, 136, 137, 144], "suppos": [127, 142], "sure": [115, 121, 123, 129, 130, 144], "surfac": 131, "surpris": 32, "surprisingli": 111, "sushi": 142, "sw": 32, "swift": [111, 129], "sy": [130, 133], "symptom": 112, "system": [111, 127, 130, 131, 132, 133, 135, 140, 142], "systemat": 121, "szechuan": 142, "t": [11, 35, 110, 111, 112, 113, 121, 122, 123, 124, 126, 127, 129, 135, 137, 140], "t2rerank": 138, "t2retriev": 138, "tabl": 140, "takayama": 142, "take": [10, 105, 108, 111, 119, 121, 126, 136, 137, 140], "tanh": [123, 124], "target": [11, 17, 21, 22, 60, 65, 70, 77], "target_devic": [21, 22], "target_modul": [53, 58, 76, 81], "task": [10, 21, 45, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 111, 112, 116, 121, 122, 127, 135, 136, 137, 138, 144], "task_lang": 137, "task_list_clust": 137, "task_nam": 136, "task_typ": 24, "tast": 142, "taylor": [111, 129], "te": 32, "tea": 142, "teach": 119, "teacher": [10, 11, 17, 59, 70, 82], "teacher_scor": [11, 17, 70, 82], "teacher_target": 11, "teatur": [17, 82], "techniqu": [119, 121, 131, 142, 144], "technologi": 112, "tell": [126, 135], "temp_dataset": 10, "temperatur": [11, 60, 65, 69, 70, 77], "templat": [21, 22, 92, 94, 95, 97, 98, 99, 100, 101, 102, 143, 144], "temporari": 130, "tensor": [11, 13, 17, 19, 21, 54, 56, 60, 62, 65, 67, 70, 72, 77, 79, 82, 84, 87, 89, 92, 94, 95, 97, 98, 123, 126, 138], "term": [113, 124], "terribl": 131, "test": [24, 27, 35, 39, 105, 115, 122, 133, 136, 137, 138], "text": [10, 16, 21, 22, 35, 39, 45, 54, 70, 82, 87, 95, 105, 108, 110, 113, 116, 121, 122, 124, 127, 132, 135, 136, 137, 138, 140], "text_input": 70, "text_qa_templ": 144, "text_splitt": 143, "textbf": [127, 135], "textual": [137, 138], "tf": 121, "tf32": 69, "th": [32, 113, 124, 127, 135], "thai": 142, "than": [105, 108, 111, 113, 121, 122, 126, 133], "thei": [32, 108, 112, 114, 116, 121, 123, 127, 130, 135, 137], "them": [39, 105, 108, 111, 113, 121, 123, 124, 126, 129, 130, 131, 132, 143], "theme": 142, "themselv": 142, "therefor": 123, "theta": 126, "thi": [10, 21, 22, 24, 59, 111, 112, 113, 119, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145], "thing": 143, "those": [111, 131], "thousand": 129, "three": [70, 109, 113, 121, 122, 130, 135], "thrid": 135, "through": [108, 116, 122, 123, 129, 130, 131, 135, 137, 138, 140, 144], "thu": [108, 111, 126, 131, 132, 133, 140, 143], "thunewsclusteringp2p": 138, "thunewsclusterings2": 138, "tiger": 140, "tigri": 140, "time": [105, 108, 111, 114, 116, 121, 124, 127, 129, 130, 131, 133, 135, 137, 138, 140], "tini": [111, 129, 133], "tip": 119, "tnew": 138, "todai": [121, 140], "tofu": 142, "togeth": [21, 22, 123], "token": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 94, 95, 97, 98, 99, 100, 101, 102, 105, 113, 121, 122, 123, 124, 138], "token_type_embed": [123, 124], "token_type_id": 123, "tokenizer_nam": [9, 15, 53, 58, 69, 76, 81], "tokenzi": 59, "tom": 142, "tonight": 126, "too": 131, "tool": 122, "toolkit": 106, "top": [108, 112, 114, 127, 132, 135, 137, 138, 140, 144], "topic": [32, 109, 119, 145], "torch": [11, 13, 17, 19, 21, 54, 60, 65, 70, 77, 87, 92, 94, 95, 97, 98, 123, 124, 126], "torch_compil": 69, "torch_compile_backend": 69, "torch_compile_mod": 69, "torch_empty_cache_step": 69, "torchdynamo": 69, "total": [10, 59, 127, 129, 130, 133, 135, 140], "totoal": 127, "touche2020": [136, 137], "toxicconversationsclassif": 137, "tpu_metrics_debug": 69, "tpu_num_cor": 69, "tqdm": [135, 140], "tract": 112, "tradeoff": [133, 140], "tradit": [121, 142], "traffic": 112, "train": [10, 11, 12, 13, 16, 17, 18, 19, 24, 32, 39, 54, 60, 61, 65, 69, 70, 71, 77, 82, 87, 105, 112, 113, 114, 121, 123, 129, 131, 132, 133, 135, 137, 138, 140, 143], "train_batch_s": [17, 54, 82, 87], "train_data": [9, 15, 58], "train_dataset": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "train_group_s": [9, 15, 58], "trainer": [12, 13, 18, 19, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "trainer_util": 69, "trainercallback": [13, 19, 56, 62, 67, 72, 79, 84, 89], "trainercontrol": 10, "trainerst": 10, "training_arg": [10, 12, 18, 55, 59, 61, 66, 69, 71, 78, 83, 88], "trainingargu": [13, 19, 56, 62, 67, 72, 79, 84, 89], "transform": [21, 22, 69, 108, 123, 124, 131, 132], "transpar": 121, "treatment": 112, "treccovid": [136, 137], "tri": [21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "true": [10, 11, 13, 16, 19, 21, 22, 27, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 111, 113, 114, 115, 121, 122, 123, 124, 126, 127, 129, 135, 140, 142, 143], "truncat": [123, 135], "trust_remote_cod": [9, 15, 53, 58, 69, 71, 76, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "truth": [111, 127, 133, 135, 140], "try": [105, 131, 135, 140], "tune": [12, 18, 106, 109, 113, 122, 137], "tup": 140, "tupl": [12, 13, 16, 18, 19, 22, 55, 56, 61, 62, 66, 67, 71, 72, 78, 79, 83, 84, 88, 89, 98, 99, 100, 101, 102], "ture": [111, 129], "tutori": [105, 109, 111, 113, 116, 119, 127, 129, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 144], "tweetsentimentextractionclassif": 137, "twentynewsgroupsclust": 137, "twittersemeval2015": 137, "twitterurlcorpu": 137, "two": [24, 98, 108, 112, 113, 114, 121, 123, 124, 126, 127, 130, 131, 133, 135], "type": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 35, 53, 54, 55, 58, 59, 60, 61, 65, 66, 69, 70, 71, 76, 77, 78, 81, 82, 83, 87, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 126, 129, 132, 135, 140, 144], "typic": [108, 142, 143], "typolog": [35, 39], "u": [107, 111, 118, 121, 122, 123, 124, 126, 129, 133, 135, 140, 142, 143, 144], "u270": 142, "unbalanc": [105, 113], "uncom": [129, 135], "under": 144, "underli": [54, 82, 87], "unfamiliar": 119, "unicoil": 105, "unifi": 122, "unified_finetun": [69, 70], "union": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 126], "univers": [111, 129], "unsqueez": 123, "unsupport": 21, "up": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 113, 115, 122, 124, 131, 137, 140, 142], "updat": [24, 118, 129, 130, 137], "update_prompt": 144, "upon": [111, 129], "uptown": 142, "urinari": 112, "urllib": 133, "urlretriev": 133, "us": [10, 11, 16, 17, 21, 22, 27, 39, 42, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "usag": [121, 122, 129, 130, 131, 132, 133, 136, 143], "use_bf16": [99, 100, 101], "use_cpu": 69, "use_dataload": [99, 100], "use_flash_attn": [53, 58, 76, 81], "use_fp16": [21, 22, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 111, 114, 115, 122, 124, 126, 129, 135, 140, 142], "use_ipex": 69, "use_legacy_prediction_loop": 69, "use_lora": [53, 58, 76, 81], "use_mps_devic": 69, "use_self_distil": [69, 70], "use_slow_token": [53, 58], "user": [109, 130, 133, 142, 144], "user_input": 142, "usual": [108, 127, 132, 140], "util": [112, 113, 115, 124], "v": [113, 124, 137, 138], "v1": [27, 42, 45, 105, 110, 111, 113, 117, 121, 123, 126, 129, 135, 136, 137, 138, 140, 142, 143, 144], "v2": [24, 27, 32, 35, 39, 42, 117, 121, 138, 140], "valu": [11, 17, 60, 65, 70, 77, 105, 113, 122, 123, 124, 126, 127, 131], "valueerror": [10, 11, 16, 21, 22, 70, 92, 93], "var": [92, 93], "vari": [113, 124], "variabl": [137, 138], "varieti": [45, 136, 142], "variou": [45, 112, 121, 136], "vast": 108, "vdev": 130, "ve": [111, 126, 136, 138], "vector": [21, 60, 65, 70, 77, 92, 94, 95, 97, 98, 105, 108, 111, 116, 121, 122, 123, 126, 129, 130, 131, 132, 133, 135, 140, 142, 143, 144], "vector_stor": 144, "vectordb": 143, "vectorstor": 143, "vectorstoreindex": 144, "veget": 142, "verb": 126, "veri": [108, 111, 121, 122, 126, 129, 130, 131, 133, 137, 143, 144], "versatil": [111, 113, 122, 129, 143], "version": [24, 107, 116, 122, 124, 130, 137, 143], "via": [21, 22, 111, 124, 129], "videoretriev": 138, "vietnam": 142, "vietnames": 142, "view": 126, "virtual": [112, 129, 130], "visibl": 116, "vision": [111, 129], "visit": [118, 119, 131], "vo": 121, "vocabulari": 105, "voic": [111, 129], "voronoi": 131, "voyage_api_kei": 121, "voyageai": 121, "vram": [105, 130], "vre": 130, "w_": [113, 124], "w_1": [113, 124], "w_2": [113, 124], "w_3": [113, 124], "wa": [111, 113, 116, 129], "wai": [70, 98, 105, 111, 115, 121, 126, 130, 131, 132], "waimai": 138, "wait": 137, "walk": [122, 135], "wall": [130, 133], "want": [21, 22, 107, 111, 119, 129, 131, 135, 137, 142, 143, 144], "warmup_ratio": 69, "warmup_step": 69, "warn": 69, "watch": [121, 126], "wave": 121, "we": [39, 105, 106, 108, 110, 111, 113, 118, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145], "web": 112, "websit": 138, "wechat": 118, "week": 112, "weight": [70, 98, 101, 105, 113, 122, 124], "weight_decai": 69, "weights_for_different_mod": 98, "welcom": 119, "well": [45, 109, 111, 115, 116, 127, 131, 136, 140, 142, 143, 144], "went": 130, "were": [114, 116, 121], "what": [111, 112, 113, 122, 124, 126, 131, 140, 143, 144], "when": [11, 22, 71, 94, 95, 97, 98, 105, 127, 130, 131, 132, 133, 135, 137, 144], "where": [113, 124, 127, 129, 131, 135, 142, 143], "wherea": 108, "whether": [105, 127, 130], "which": [11, 21, 22, 45, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 111, 115, 116, 117, 122, 124, 126, 127, 129, 131, 136, 137, 138, 140, 142, 143, 144], "while": [111, 113, 121, 126, 130, 131, 144], "who": [32, 35, 111, 129], "whole": [45, 123, 129, 131, 135, 136, 137, 143], "why": [105, 131, 133], "wide": [27, 42, 45, 108, 111, 114, 127, 131, 133, 135, 136, 137], "wikipedia": 39, "wikipeida": 39, "win": [111, 129], "wine": 142, "within": [113, 121, 124, 127, 137, 138, 144], "without": [107, 112, 113, 116, 122, 131, 142, 143], "women": 112, "won": 111, "wonder": [126, 142], "wood": 142, "word": [108, 113, 121, 124, 135], "word2vec": [108, 121], "word_embed": [123, 124], "work": [21, 22, 105, 111, 113, 122, 129, 131, 140], "worker": [99, 100], "world": [42, 45, 108, 116, 131, 136, 144], "would": [121, 135, 136, 143, 144], "wrapper": 16, "write": [127, 143], "write_index": [129, 135], "written": 137, "wrote": 123, "wsdm": 32, "wudao": 39, "x": [24, 27, 32, 35, 39, 42, 45, 123, 124], "x86_64": [130, 131, 132, 133], "xlm": [114, 122, 124, 140], "xlmrobertaattent": 124, "xlmrobertaembed": 124, "xlmrobertaencod": 124, "xlmrobertaintermedi": 124, "xlmrobertalay": 124, "xlmrobertamodel": 124, "xlmrobertaoutput": 124, "xlmrobertapool": 124, "xlmrobertaselfattent": 124, "xlmrobertaselfoutput": 124, "yi": 142, "yichiran": 142, "yo": 32, "york": 142, "you": [21, 22, 24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105, 107, 108, 109, 110, 112, 114, 115, 119, 121, 122, 123, 124, 126, 129, 130, 133, 135, 136, 137, 138, 140, 142, 143, 144], "your": [24, 27, 32, 35, 39, 42, 45, 105, 115, 121, 122, 123, 124, 129, 130, 133, 135, 136, 137, 138, 142, 143, 144], "your_api_kei": [121, 142, 143, 144], "your_existing_readm": 137, "yum": 142, "zero": [105, 127, 135, 140], "zh": [39, 116, 122, 138], "zh_cn": 35, "zh_result": 138, "zip": [111, 126, 127, 130, 135, 140], "\u0434\u044d\u0439\u0432": 35, "\u043a\u0442\u043e": 35, "\u043f\u043e\u0435\u0442": 35, "\u044d\u0434\u043c\u0443\u043d\u0434\u0441": 35, "\u306f\u8ab0\u304c\u6b4c\u3063\u3066\u3044\u307e\u3059\u304b": 35, "\u30a8\u30c9\u30e2\u30f3\u30ba": 35, "\u30c7\u30a4\u30d6": 35, "\u30c7\u30a4\u30f4": 35, "\u30c7\u30fc\u30d6": 35, "\u4e3a\u8fd9\u4e2a\u53e5\u5b50\u751f\u6210\u8868\u793a\u4ee5\u7528\u4e8e\u68c0\u7d22\u76f8\u5173\u6587\u7ae0": 138, "\u57c3\u5fb7\u8499\u5179": 35, "\u6234\u7ef4": 35, "\u662f\u8c01\u6f14\u5531\u7684": 35}, "titles": ["Abstract Class", "Evaluation", "Arguments", "dataset loader", "Evaluator", "runner", "searcher", "Finetune", "Embedder", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Reranker", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Inference", "AbsEmbedder", "AbsReranker", "Evaluation", "AIR-Bench", "arguments", "runner", "BEIR", "arguments", "data loader", "evaluator", "runner", "MIRACL", "data_loader", "runner", "MKQA", "data_loader", "evaluator", "runner", "MLDR", "data_loader", "runner", "MSMARCO", "data_loader", "runner", "MTEB", "arguments", "runner", "searcher", "Finetune", "Embedder", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "ICL", "Arguments", "Dataset", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "M3", "Arguments", "Modeling", "Runner", "Trainer", "Reranker", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "Layerwise", "Arguments", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "API", "Inference", "FlagAutoModel", "FlagAutoReranker", "BaseEmbedder", "ICLLLMEmbedder", "Embedder", "BaseEmbedder", "M3Embedder", "BaseLLMReranker", "LayerWiseLLMReranker", "LightweightLLMReranker", "BaseReranker", "Reranker", "&lt;no title&gt;", "FAQ", "Introduction", "Installation", "Model", "Overview", "Quick Start", "Retrieval Demo", "BGE-EN-ICL", "BGE-M3", "BGE-Reranker", "BGE-Reranker-v2", "BGE v1 &amp; v1.5", "BGE", "Community", "BGE", "1. Embedding", "Intro to Embedding", "BGE Series", "BGE Explanation", "BGE-M3", "2. Metrics", "Similarity", "Evaluation Metrics", "3. Indexing", "Indexing Using Faiss", "Faiss GPU", "Faiss Indexes", "Faiss Quantizers", "Choosing Index", "4. Evaluation", "Evaluation", "MTEB", "MTEB Leaderboard", "C-MTEB", "5. Reranking", "Reranker", "6. RAG", "Simple RAG From Scratch", "RAG with LangChain", "RAG with LlamaIndex", "Tutorials"], "titleterms": {"0": [111, 123, 124, 127, 129, 133, 135, 136, 137, 138, 140, 142, 143, 144], "1": [111, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144], "2": [111, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 137, 138, 140, 142, 143, 144], "3": [111, 122, 124, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 140, 142, 143, 144], "4": [111, 122, 124, 126, 127, 129, 130, 131, 133, 134, 135, 137, 138, 140], "5": [116, 122, 126, 127, 129, 130, 133, 135, 139, 140], "6": [133, 140, 141], "absargu": [9, 15], "absdataset": [10, 16], "absembedd": 21, "absembeddercol": 10, "absembeddermodel": 11, "absembeddersamedatasetcol": [10, 59], "absembeddersamedatasettraindataset": 10, "absembeddertrain": [12, 13], "absembeddertraindataset": 10, "absllmrerankercol": 16, "absllmrerankertraindataset": 16, "absmodel": [11, 17], "absrerank": 22, "absrerankercol": 16, "absrerankermodel": 17, "absrerankertrain": [18, 19], "absrerankertraindataset": 16, "absrunn": [12, 18], "abstract": 0, "abstrain": [13, 19], "ai": 121, "air": 24, "all": 130, "answer": 129, "api": 90, "approach": 126, "argument": [2, 25, 28, 46, 53, 58, 69, 76, 81], "avail": 130, "baai": 122, "background": 121, "base": [52, 64, 75, 86], "baseembedd": [94, 97], "basellmrerank": 99, "basererank": 102, "beir": 27, "bench": 24, "bge": [112, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124], "build": 130, "c": 138, "calcul": 111, "call": 126, "choos": 133, "class": 0, "commerci": 121, "commun": 118, "comparison": 123, "concept": 106, "cosin": 126, "cpu": [129, 130], "creat": 130, "cuda": 107, "data": [29, 130, 142, 143, 144], "data_load": [33, 36, 40, 43], "dataset": [3, 59, 129, 133, 135, 138, 140], "decod": [51, 74], "decoderonlyembeddericlsamedatasettraindataset": 59, "demo": 111, "dens": [113, 124], "distanc": 126, "dot": 126, "embed": [111, 120, 121, 122, 129, 135, 140], "embedd": [8, 50, 96, 108, 117, 122], "embedderoutput": 11, "embeddertrainercallbackfordatarefresh": 10, "en": 112, "encod": [63, 85, 123], "encoderonlyembedderm3model": 70, "encoderonlyembedderm3modelforinfer": 70, "euclidean": 126, "evaldenseretriev": 6, "evalrerank": 6, "evalretriev": 6, "evalu": [1, 4, 23, 30, 37, 111, 127, 134, 135, 137, 138, 140], "exampl": [126, 131], "explan": 123, "faiss": [129, 130, 131, 132], "faq": 105, "find": 129, "finetun": [7, 49], "flagautomodel": 92, "flagautorerank": 93, "flat": 133, "from": [107, 142], "function": [113, 124, 126, 133], "futur": 137, "gener": [122, 142, 143, 144], "get": 121, "gpu": [129, 130], "granular": 113, "helper": 133, "hnsw": 133, "hybrid": [113, 124], "icl": [57, 112], "iclllmembedd": 95, "implement": 126, "index": [128, 129, 130, 131, 132, 133, 135, 140, 142, 143, 144], "indexflat": 131, "indexhnsw": 131, "indexivf": 131, "indexlsh": 131, "infer": [20, 91], "inner": 126, "instal": [107, 123, 124, 130, 136, 137, 138], "intro": [121, 131, 136], "introduct": 106, "ivf": [132, 133], "jaccard": 126, "langchain": 143, "layerwis": 80, "layerwisellmrerank": 100, "leaderboard": [137, 138], "lightweightllmrerank": 101, "lingual": 113, "linux": 129, "llamaindex": 144, "llm": 122, "load": 135, "loader": [3, 29], "lsh": 133, "m3": [68, 113, 122, 124], "m3embedd": 98, "map": 127, "maximum": 126, "method": [3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 33, 36, 40, 43, 54, 59, 60, 65, 70, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "metric": [125, 127], "miracl": 32, "mkqa": 35, "mldr": 39, "model": [54, 60, 65, 70, 77, 82, 87, 108, 121, 122, 138], "mrr": [127, 135, 140], "msmarco": 42, "mteb": [45, 136, 137, 138], "multi": [113, 124], "multipl": 130, "naiv": 126, "ndcg": [127, 135, 140], "onli": [51, 63, 74, 85], "open": 121, "openai": 121, "option": [129, 130], "overview": 109, "packag": 133, "partial": 137, "pip": 107, "precis": 127, "prepar": [111, 127, 130, 131, 132, 133, 142, 143, 144], "product": [126, 132, 133], "pytorch": [107, 126], "quantiz": [132, 133], "queri": 129, "quick": 110, "rag": [141, 142, 143, 144], "rank": [111, 113, 124], "recal": [127, 135, 140], "relationship": 126, "rerank": [14, 73, 103, 108, 114, 115, 117, 139, 140], "rerankeroutput": 17, "result": 130, "retreiv": 143, "retriev": [111, 113, 124, 135, 140, 142, 144], "run": 137, "runner": [5, 26, 31, 34, 38, 41, 44, 47, 55, 61, 66, 71, 78, 83, 88], "save": 129, "scalar": [132, 133], "scratch": 142, "search": [126, 130], "searcher": [6, 48], "sentenc": [121, 123], "seri": 122, "setup": [129, 135, 140], "shortag": 131, "similar": [111, 126], "simpl": 142, "singl": 130, "sourc": [107, 121], "spars": [113, 124], "start": [106, 110], "step": [111, 129, 135], "structur": 124, "submit": [137, 138], "text": [111, 129], "tradeoff": 131, "trainer": [56, 62, 67, 72, 79, 84, 89], "transform": 121, "tutori": 145, "us": [107, 129], "usag": [112, 113, 114, 115, 116], "v1": [116, 122], "v2": 115, "vector": [113, 124], "voyag": 121, "work": 137, "x86_64": 129}})